Timer unit: 3.66556e-07 s

Total time: 40.6711 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\LP_formulate.py
Function: LP_formulate at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           ####'#@profile
     7                                           def LP_formulate(AA, prim_name, dual_name,  Kset, Jset, tolerance = 0):
     8       613     453414.0    739.7      0.4      nJset = [-v for v in Jset]
     9       613      20662.0     33.7      0.0      prim_sign = np.zeros((len(prim_name),1), dtype = int)
    10       613     319656.0    521.5      0.3      prim_sign[ismember(prim_name,Kset)] = 1
    11       613     273128.0    445.6      0.2      prim_sign[ismember(prim_name,nJset)] = -1
    12       613       9656.0     15.8      0.0      dual_sign = np.zeros((len(dual_name),1), dtype = int)
    13       613     292202.0    476.7      0.3      dual_sign[ismember(dual_name,nJset)] = 1
    14       613     253815.0    414.1      0.2      dual_sign[ismember(dual_name,Kset)] = -1
    15       613  109330518.0 178353.2     98.5      A, pn, dn, ps, ds, err = simplex_procedures(AA.copy(), prim_name.copy(), dual_name.copy(), np.hstack(prim_sign), np.hstack(dual_sign), tolerance)
    16       613       1691.0      2.8      0.0      return pn, dn, A

Total time: 0 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\SCLP_pivot4.py
Function: SCLP_pivot at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                           ####'#@profile
    19                                           def SCLP_pivot(Kset_0, Jset_N, prim_name, dual_name, N1, N2, v1, v2, pivots, base_sequence, KK, JJ, NN, totalK, totalJ,
    20                                                          DEPTH, STEPCOUNT, ITERATION, settings, tolerance):
    21                                           
    22                                               if N1 == -1:
    23                                                   pbaseB1 = np.array([])
    24                                                   newDict, newPlace = calc_dict(base_sequence, N1, N2, pivots)
    25                                                   base_sequence = insertMatrix(base_sequence, newDict, newPlace)
    26                                                   AAN1 = None
    27                                                   AAN2 = newDict
    28                                                   BB2 = newDict['A'].copy()
    29                                                   pbaseB2 = newDict['prim_name']
    30                                                   dbaseB2 = newDict['dual_name']
    31                                                   Jset = -dbaseB2[dbaseB2 < 0]
    32                                                   Kset = Kset_0
    33                                                   if  not isinstance(v1, list):
    34                                                       Jset = Jset[Jset!=-v1]
    35                                                       if v1 > 0:
    36                                                           Kset = np.append(Kset, v1)
    37                                                   else:
    38                                                       print('v1',v1)
    39                                                   # np.savetxt(relative_to_project('tests/subproblem/BB2.csv'), BB2)
    40                                                   # np.savetxt(relative_to_project('tests/subproblem/pbaseB2.csv'), pbaseB2)
    41                                                   # np.savetxt(relative_to_project('tests/subproblem/dbaseB2.csv'), dbaseB2)
    42                                                   # np.savetxt(relative_to_project('tests/subproblem/Kset.csv'), Kset)
    43                                                   # np.savetxt(relative_to_project('tests/subproblem/Jset.csv'), Jset)
    44                                                   pbaseDD, dbaseDD, DD = LP_formulate(BB2, pbaseB2, dbaseB2, Kset, Jset, tolerance)
    45                                                   if np.size(np.setdiff1d(pbaseDD, pbaseB2, assume_unique=True)) == 0 and \
    46                                                           np.size(np.setdiff1d(dbaseDD, dbaseB2, assume_unique=True)) == 0:
    47                                                       print('Basis B2 is optimal')
    48                                                       return prim_name, dual_name, pivots, base_sequence, STEPCOUNT, ITERATION
    49                                               elif N2 == NN:
    50                                                   pbaseB2 = np.array([])
    51                                                   newDict, newPlace = calc_dict(base_sequence, N1, N2, pivots)
    52                                                   AAN1 = newDict
    53                                                   base_sequence = insertMatrix(base_sequence, newDict, newPlace)
    54                                                   AAN2 = None
    55                                                   BB1 = newDict['A'].copy()
    56                                                   pbaseB1 = newDict['prim_name']
    57                                                   dbaseB1 = newDict['dual_name']
    58                                                   dbaseB2 = np.array([])
    59                                                   Kset = pbaseB1[pbaseB1 > 0]
    60                                                   Jset = Jset_N
    61                                                   if not isinstance(v2, list):
    62                                                       Kset = Kset[Kset!=v2]
    63                                                       if v2 < 0:
    64                                                           Jset = np.append(Jset, -v2)
    65                                                   else:
    66                                                       print('v2', v2)
    67                                                   pbaseDD, dbaseDD, DD = LP_formulate(BB1, pbaseB1, dbaseB1, Kset, Jset, tolerance)
    68                                                   if np.size(np.setdiff1d(pbaseB1, pbaseDD, assume_unique=True)) == 0 and \
    69                                                           np.size(np.setdiff1d(dbaseB1, dbaseDD, assume_unique=True)) == 0:
    70                                                       print('Basis B1 is optimal')
    71                                                       return prim_name, dual_name, pivots, base_sequence, STEPCOUNT, ITERATION
    72                                               else:
    73                                                   # BB1 = AA(:,:,N1)
    74                                                   # BB2 = AA(:,:,N2)
    75                                                   N1Dict, N1Place = calc_dict(base_sequence, N1, N1, pivots)
    76                                                   AAN1 = N1Dict
    77                                                   # MatrixAA = insertMatrix( MatrixAA, newDict, newPlace )
    78                                                   N2Dict, N2Place = calc_dict(base_sequence, N2, N2, pivots)
    79                                                   AAN2 = N2Dict
    80                                                   # MatrixAA = insertMatrix( MatrixAA, newDict1, newPlace1 )
    81                                                   BB2 = N2Dict['A'].copy()
    82                                                   pbaseB1 = N1Dict['prim_name']
    83                                                   dbaseB1 = N1Dict['dual_name']
    84                                                   pbaseB2 = N2Dict['prim_name']
    85                                                   dbaseB2 = N2Dict['dual_name']
    86                                           
    87                                                   if isinstance(v1, list) or isinstance(v2, list):
    88                                                       vv =np.setdiff1d(pbaseB1, pbaseB2, assume_unique=True)
    89                                                       if isinstance(v2, list):
    90                                                           v2 = vv
    91                                                       else:
    92                                                           v1 = vv
    93                                                   Kset = pbaseB1[pbaseB1 > 0]
    94                                                   Kset = Kset[Kset != v2]
    95                                                   Jset = -dbaseB2[dbaseB2 < 0]
    96                                                   Jset = Jset[Jset != -v1]
    97                                                   pbaseDD, dbaseDD, DD = LP_formulate(BB2, pbaseB2, dbaseB2, Kset, Jset, tolerance)
    98                                           
    99                                               objective = DD[0, 0]
   100                                           
   101                                               if objective == np.inf or objective == -np.inf:
   102                                                   if N1 == -1:
   103                                                       print('***  beyond this primal problem is unbounded, dual is infeasible')
   104                                                       cases = 'unbound_'
   105                                                   elif N2 == NN:
   106                                                       print('***  beyond this primal problem is infeasible, dual is unbounded')
   107                                                       cases = 'infeas__'
   108                                                   else:
   109                                                       raise Exception('*** infeasibility in middle of base sequence')
   110                                                   return prim_name, dual_name, pivots, base_sequence, STEPCOUNT, ITERATION
   111                                           
   112                                               i1 = 1
   113                                               i2 = 1
   114                                               if N1 >= 0:
   115                                                   i1 = np.size(np.setdiff1d(pbaseB1, pbaseDD, assume_unique=True))
   116                                               if N2 < NN:
   117                                                   i2 = np.size(np.setdiff1d(pbaseDD, pbaseB2, assume_unique=True))
   118                                               if i1 == 1 and i2 == 1:
   119                                                   pn_new = np.vstack(pbaseDD)
   120                                                   dn_new = np.vstack(dbaseDD)
   121                                                   dx, dq = extract_rates(pbaseDD, dbaseDD, DD, KK, JJ, totalK, totalJ)
   122                                                   sub_base_seq = {'dq': [dq], 'dx': [dx], 'bases': [DD], 'places': [0]}
   123                                               else:
   124                                                   if N1 == -1:
   125                                                       Kex1 =  np.intersect1d(pbaseDD[pbaseDD > 0], Kset_0, assume_unique=True)
   126                                                       Kexclude =  np.intersect1d(Kex1, pbaseB2[pbaseB2 > 0], assume_unique=True)
   127                                                       Jexclude = -np.intersect1d(dbaseDD[dbaseDD < 0], dbaseB2[dbaseB2 < 0], assume_unique=True)
   128                                                   elif N2 == NN:
   129                                                       Kexclude =  np.intersect1d(pbaseDD[pbaseDD > 0], pbaseB1[pbaseB1 > 0], assume_unique=True)
   130                                                       Jex1 =  np.intersect1d(dbaseDD[dbaseDD < 0], [-v for v in Jset_N], assume_unique=True)
   131                                                       Jexclude = -np.intersect1d(Jex1, dbaseB1[dbaseB1 < 0], assume_unique=True)
   132                                                   else:
   133                                                       Kexclude =  np.intersect1d(pbaseB1[pbaseB1 > 0], pbaseB2[pbaseB2 > 0], assume_unique=True)
   134                                                       Jexclude = -np.intersect1d(dbaseB1[dbaseB1 < 0], dbaseB2[dbaseB2 < 0], assume_unique=True)
   135                                                       if not isinstance(v1, list):
   136                                                           Kexclude = Kexclude[Kexclude != v1]
   137                                                           Jexclude = Jexclude[Jexclude != -v1]
   138                                                       if not isinstance(v2, list):
   139                                                           Kexclude = Kexclude[Kexclude != v2]
   140                                                           Jexclude = Jexclude[Jexclude != -v2]
   141                                                   pn_new, dn_new, sub_base_seq,\
   142                                                   STEPCOUNT, ITERATION = SCLP_subproblem(pbaseDD, dbaseDD, DD, N1, N2, v1, v2, Kexclude, Jexclude, pbaseB1, pbaseB2,
   143                                                                                           AAN1, AAN2, KK, JJ, NN, totalK, totalJ, DEPTH+1, STEPCOUNT, ITERATION, settings, tolerance)
   144                                               Nnew = len(sub_base_seq['dx'])
   145                                               NNold = NN
   146                                               pivots_new = pivots[0:N1 + 1]
   147                                               if N1 >= 0:
   148                                                   if len(pivots_new) > N1:
   149                                                       pivots_new[N1] = np.setdiff1d(prim_name[:, N1],  pn_new[:, 0], assume_unique=True).tolist() +\
   150                                                                        np.setdiff1d(dual_name[:, N1], dn_new[:, 0], assume_unique=True).tolist()
   151                                                   else:
   152                                                       pivots_new.append(np.setdiff1d(prim_name[:, N1],  pn_new[:, 0], assume_unique=True).tolist()
   153                                                                     + np.setdiff1d(dual_name[:, N1], dn_new[:, 0], assume_unique=True).tolist())
   154                                               for nn in range(Nnew - 1):
   155                                                   pivots_new.append(np.setdiff1d(pn_new[:, nn], pn_new[:, nn+1], assume_unique=True).tolist()
   156                                                                 + np.setdiff1d(dn_new[:, nn], dn_new[:, nn+1], assume_unique=True).tolist())
   157                                               if N2 < NNold:
   158                                                   pivots_new.append(np.setdiff1d(pn_new[:, -1], prim_name[:, N2], assume_unique=True).tolist()
   159                                                                 + np.setdiff1d(dn_new[:, -1], dual_name[:, N2], assume_unique=True).tolist())
   160                                                   if len(pivots[N2:]) > 0:
   161                                                       pivots_new+=(pivots[N2:])
   162                                               pn_new = np.hstack((prim_name[:, 0:N1+1],  pn_new,  prim_name[:, N2:]))
   163                                               dn_new = np.hstack((dual_name[:, 0:N1+1],  dn_new,  dual_name[:, N2:]))
   164                                           
   165                                               lplaces = np.logical_or(np.array(base_sequence['places']) <= N1, np.array(base_sequence['places']) >= N2)
   166                                               places = find(lplaces)
   167                                               #print(N1, N2, Nnew)
   168                                               if len(places) == 0:
   169                                                   if AAN1 is not None:
   170                                                       newPlace = [N1]
   171                                                       newMat = [AAN1]
   172                                                   else:
   173                                                       newPlace = [N1 + Nnew + 1]
   174                                                       newMat = [AAN2]
   175                                               else:
   176                                                   newMat = [base_sequence['bases'][i] for i in places]
   177                                                   newPlace = [base_sequence['places'][i] for i in places]
   178                                                   newPlace = [v if v < N2 else v - (N2 - N1 - 1) + Nnew for v in newPlace]
   179                                               new_base_sequence = {'dx': base_sequence['dx'][0:N1+1] + sub_base_seq['dx'] + base_sequence['dx'][N2:],
   180                                                                    'dq': base_sequence['dq'][0:N1+1] + sub_base_seq['dq'] + base_sequence['dq'][N2:],
   181                                                                    'bases': newMat, 'places': newPlace}
   182                                               if N2 < NN and DEPTH == 0:
   183                                                   new_base_sequence = insertMatrix(new_base_sequence, AAN2, N1+Nnew+1)
   184                                               # elif N1 == NN and DEPTH == 0:
   185                                               #     new_base_sequence = insertMatrix(new_base_sequence, AAN2, N1+1)
   186                                               if Nnew == 1 and DEPTH == 0:
   187                                                   new_base_sequence = insertMatrix(new_base_sequence, {'prim_name': pbaseDD, 'dual_name': dbaseDD, 'A': DD}, N1+Nnew)
   188                                               return pn_new, dn_new, pivots_new, new_base_sequence, STEPCOUNT, ITERATION

Total time: 78.8503 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\SCLP_pivot5.py
Function: SCLP_pivot at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           ####'#@profile
     8                                           def SCLP_pivot(Kset_0, Jset_N, solution, N1, N2, v1, v2, KK, JJ, NN, totalK, totalJ,
     9                                                          DEPTH, STEPCOUNT, ITERATION, settings, tolerance):
    10                                           
    11       613       3828.0      6.2      0.0      if N1 == -1:
    12        27        324.0     12.0      0.0          pbaseB1 = np.array([])
    13        27        102.0      3.8      0.0          AAN1 = None
    14        27     242302.0   8974.1      0.1          AAN2 = solution.get_basis_at(N2)
    15        27         91.0      3.4      0.0          BB2 = AAN2['A']
    16        27         75.0      2.8      0.0          pbaseB2 = AAN2['prim_name']
    17        27         66.0      2.4      0.0          dbaseB2 = AAN2['dual_name']
    18        27       1701.0     63.0      0.0          Jset = -dbaseB2[dbaseB2 < 0]
    19        27         81.0      3.0      0.0          Kset = Kset_0
    20        27        230.0      8.5      0.0          if  not isinstance(v1, list):
    21        27        939.0     34.8      0.0              Jset = Jset[Jset!=-v1]
    22        27        129.0      4.8      0.0              if v1 > 0:
    23        13        742.0     57.1      0.0                  Kset = np.append(Kset, v1)
    24                                                   else:
    25                                                       print('v1',v1)
    26        27    1260448.0  46683.3      0.6          pbaseDD, dbaseDD, DD = LP_formulate(BB2, pbaseB2, dbaseB2, Kset, Jset, tolerance)
    27        27       8846.0    327.6      0.0          if np.size(np.setdiff1d(pbaseDD, pbaseB2, assume_unique=True)) == 0 and \
    28                                                           np.size(np.setdiff1d(dbaseDD, dbaseB2, assume_unique=True)) == 0:
    29                                                       print('Basis B2 is optimal')
    30                                                       return solution, STEPCOUNT, ITERATION
    31       586       2638.0      4.5      0.0      elif N2 == NN:
    32       307       6876.0     22.4      0.0          pbaseB2 = np.array([])
    33       307   29671347.0  96649.3     13.8          AAN1 = solution.get_basis_at(N1)
    34       307       1178.0      3.8      0.0          AAN2 = None
    35       307       1290.0      4.2      0.0          BB1 = AAN1['A']
    36       307       1214.0      4.0      0.0          pbaseB1 = AAN1['prim_name']
    37       307       1245.0      4.1      0.0          dbaseB1 = AAN1['dual_name']
    38       307      13471.0     43.9      0.0          dbaseB2 = np.array([])
    39       307      21324.0     69.5      0.0          Kset = pbaseB1[pbaseB1 > 0]
    40       307       1266.0      4.1      0.0          Jset = Jset_N
    41       307       4229.0     13.8      0.0          if not isinstance(v2, list):
    42       307      15568.0     50.7      0.0              Kset = Kset[Kset!=v2]
    43       307       2122.0      6.9      0.0              if v2 < 0:
    44         1         49.0     49.0      0.0                  Jset = np.append(Jset, -v2)
    45                                                   else:
    46                                                       print('v2', v2)
    47       307   50580612.0 164757.7     23.5          pbaseDD, dbaseDD, DD = LP_formulate(BB1, pbaseB1, dbaseB1, Kset, Jset, tolerance)
    48       307     176117.0    573.7      0.1          if np.size(np.setdiff1d(pbaseB1, pbaseDD, assume_unique=True)) == 0 and \
    49                                                           np.size(np.setdiff1d(dbaseB1, dbaseDD, assume_unique=True)) == 0:
    50                                                       print('Basis B1 is optimal')
    51                                                       return solution, STEPCOUNT, ITERATION
    52                                               else:
    53       279   27356805.0  98053.1     12.7          AAN1, AAN2 = solution.get_bases(N1, N2)
    54       279       1209.0      4.3      0.0          BB2 = AAN2['A']
    55       279       1292.0      4.6      0.0          pbaseB1 = AAN1['prim_name']
    56       279       1178.0      4.2      0.0          dbaseB1 = AAN1['dual_name']
    57       279       1137.0      4.1      0.0          pbaseB2 = AAN2['prim_name']
    58       279       1238.0      4.4      0.0          dbaseB2 = AAN2['dual_name']
    59                                           
    60       279       4471.0     16.0      0.0          if isinstance(v1, list) or isinstance(v2, list):
    61         1        456.0    456.0      0.0              vv =np.setdiff1d(pbaseB1, pbaseB2, assume_unique=True)
    62         1          5.0      5.0      0.0              if isinstance(v2, list):
    63         1          2.0      2.0      0.0                  v2 = vv
    64                                                       else:
    65                                                           v1 = vv
    66       279      19249.0     69.0      0.0          Kset = pbaseB1[pbaseB1 > 0]
    67       279      15384.0     55.1      0.0          Kset = Kset[Kset != v2]
    68       279      14512.0     52.0      0.0          Jset = -dbaseB2[dbaseB2 < 0]
    69       279       7749.0     27.8      0.0          Jset = Jset[Jset != -v1]
    70       279   59200357.0 212187.7     27.5          pbaseDD, dbaseDD, DD = LP_formulate(BB2, pbaseB2, dbaseB2, Kset, Jset, tolerance)
    71                                           
    72       613       4537.0      7.4      0.0      objective = DD[0, 0]
    73                                           
    74       613       7293.0     11.9      0.0      if objective == np.inf or objective == -np.inf:
    75                                                   if N1 == -1:
    76                                                       print('***  beyond this primal problem is unbounded, dual is infeasible')
    77                                                       cases = 'unbound_'
    78                                                   elif N2 == NN:
    79                                                       print('***  beyond this primal problem is infeasible, dual is unbounded')
    80                                                       cases = 'infeas__'
    81                                                   else:
    82                                                       raise Exception('*** infeasibility in middle of base sequence')
    83                                                   return solution, STEPCOUNT, ITERATION
    84                                           
    85       613       2250.0      3.7      0.0      i1 = 1
    86       613       2169.0      3.5      0.0      i2 = 1
    87       613       5548.0      9.1      0.0      if N1 >= 0:
    88       586     281344.0    480.1      0.1          i1 = np.size(np.setdiff1d(pbaseB1, pbaseDD, assume_unique=True))
    89       613       4781.0      7.8      0.0      if N2 < NN:
    90       306     114734.0    374.9      0.1          i2 = np.size(np.setdiff1d(pbaseDD, pbaseB2, assume_unique=True))
    91       613       2780.0      4.5      0.0      if i1 == 1 and i2 == 1:
    92       600     295127.0    491.9      0.1          dx, dq = extract_rates(pbaseDD, dbaseDD, DD, KK, JJ, totalK, totalJ)
    93       600   44997783.0  74996.3     20.9          solution.update_caseII(N1, N2, np.vstack(pbaseDD), np.vstack(dbaseDD), dx, dq, AAN1, AAN2, None, {'prim_name': pbaseDD, 'dual_name': dbaseDD, 'A': DD})
    94       600       2770.0      4.6      0.0          return solution, STEPCOUNT, ITERATION
    95                                               else:
    96        13         53.0      4.1      0.0          if N1 == -1:
    97                                                       Kex1 =  np.intersect1d(pbaseDD[pbaseDD > 0], Kset_0, assume_unique=True)
    98                                                       Kexclude =  np.intersect1d(Kex1, pbaseB2[pbaseB2 > 0], assume_unique=True)
    99                                                       Jexclude = -np.intersect1d(dbaseDD[dbaseDD < 0], dbaseB2[dbaseB2 < 0], assume_unique=True)
   100        13         58.0      4.5      0.0          elif N2 == NN:
   101        12       6009.0    500.8      0.0              Kexclude =  np.intersect1d(pbaseDD[pbaseDD > 0], pbaseB1[pbaseB1 > 0], assume_unique=True)
   102        12       3357.0    279.8      0.0              Jex1 =  np.intersect1d(dbaseDD[dbaseDD < 0], [-v for v in Jset_N], assume_unique=True)
   103        12       2722.0    226.8      0.0              Jexclude = -np.intersect1d(Jex1, dbaseB1[dbaseB1 < 0], assume_unique=True)
   104                                                   else:
   105         1        676.0    676.0      0.0              Kexclude =  np.intersect1d(pbaseB1[pbaseB1 > 0], pbaseB2[pbaseB2 > 0], assume_unique=True)
   106         1        573.0    573.0      0.0              Jexclude = -np.intersect1d(dbaseB1[dbaseB1 < 0], dbaseB2[dbaseB2 < 0], assume_unique=True)
   107         1         16.0     16.0      0.0              if not isinstance(v1, list):
   108         1         39.0     39.0      0.0                  Kexclude = Kexclude[Kexclude != v1]
   109         1         23.0     23.0      0.0                  Jexclude = Jexclude[Jexclude != -v1]
   110         1          6.0      6.0      0.0              if not isinstance(v2, list):
   111         1         28.0     28.0      0.0                  Kexclude = Kexclude[Kexclude != v2]
   112         1         17.0     17.0      0.0                  Jexclude = Jexclude[Jexclude != -v2]
   113                                                   prim_name, dual_name, dx, dq, pivots, STEPCOUNT, ITERATION =\
   114        13         91.0      7.0      0.0           SCLP_subproblem(pbaseDD, dbaseDD, DD, N1, N2, v1, v2, Kexclude, Jexclude, pbaseB1, pbaseB2, AAN1, AAN2, KK, JJ,
   115        13     632769.0  48674.5      0.3                              NN, totalK, totalJ, DEPTH+1, STEPCOUNT, ITERATION, settings, tolerance)
   116        13      98137.0   7549.0      0.0      solution.update_caseII(N1, N2, prim_name, dual_name, dx, dq, AAN1, AAN2, pivots)
   117        13         45.0      3.5      0.0      return solution, STEPCOUNT, ITERATION

Total time: 0 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\SCLP_pivot_caseI.py
Function: SCLP_pivot_caseI at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           ####'#@profile
     6                                           def SCLP_pivot_caseI(base_sequence, pivots, prim_name, dual_name, N1, N2, NN):
     7                                               lplaces = np.logical_or(np.array(base_sequence['places']) <= N1, np.array(base_sequence['places']) >= N2)
     8                                               places = find(lplaces)
     9                                               # print(N1, N2, Nnew)
    10                                               if len(places) == 0:
    11                                                   newMat, newPlace = calc_dict(base_sequence, N1, N2, pivots)
    12                                                   base_sequence['bases'] = [newMat]
    13                                                   base_sequence['places'] = [newPlace]
    14                                               else:
    15                                                   base_sequence['bases'] = [base_sequence['bases'][i] for i in places]
    16                                                   newPlace = [base_sequence['places'][i] for i in places]
    17                                                   base_sequence['places'] = [v if v < N2 else v - (N2 - N1 - 1) for v in newPlace]
    18                                           
    19                                               base_sequence['dx'] = base_sequence['dx'][0: N1+1] + base_sequence['dx'][N2:]
    20                                               base_sequence['dq'] = base_sequence['dq'][0: N1+1] + base_sequence['dq'][N2:]
    21                                           
    22                                               if N1>=0:
    23                                                   pivots_new = pivots[0:N1]
    24                                               else:
    25                                                   pivots_new = []
    26                                               if N1 >=0 and N2 < NN:
    27                                                   pivots_new.append(np.setdiff1d(prim_name[:,N1],prim_name[:,N2], assume_unique =True).tolist()
    28                                                                     + np.setdiff1d(dual_name[:,N1],dual_name[:,N2], assume_unique =True).tolist())
    29                                               pivots_new = pivots_new + pivots[N2:]
    30                                               prim_name = np.hstack((prim_name[:,0:N1+1], prim_name[:,N2:]))
    31                                               dual_name = np.hstack((dual_name[:,0:N1+1], dual_name[:,N2:]))
    32                                               return base_sequence, pivots_new, prim_name, dual_name

Total time: 0.0459068 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\SCLP_solution.py
Function: update_caseI at line 42

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    42                                               ####'#@profile
    43                                               def update_caseI(self, N1, N2):
    44         7      67311.0   9615.9     53.7          self._base_sequence.remove_bases(N1, N2, self._pivots)
    45         7        800.0    114.3      0.6          self._dx.remove(N1 + 1, N2)
    46         7        575.0     82.1      0.5          self._dq.remove(N1 + 1, N2)
    47         7         72.0     10.3      0.1          NN = self.NN
    48                                           
    49         7         20.0      2.9      0.0          if N1 >= 0:
    50         7         89.0     12.7      0.1              pivots_new = self._pivots[0:N1]
    51                                                   else:
    52                                                       pivots_new = []
    53         7         26.0      3.7      0.0          if N1 >= 0 and N2 < NN:
    54         7       4198.0    599.7      3.4              pivots_new.append(np.setdiff1d(self._prim_name[:, N1], self._prim_name[:, N2], assume_unique=True).tolist()
    55         7       4785.0    683.6      3.8                                + np.setdiff1d(self._dual_name[:, N1], self._dual_name[:, N2], assume_unique=True).tolist())
    56         7        135.0     19.3      0.1          self._pivots = pivots_new + self._pivots[N2:]
    57         7      25105.0   3586.4     20.0          self._prim_name = np.hstack((self._prim_name[:, 0:N1 + 1], self._prim_name[:, N2:]))
    58         7      22122.0   3160.3     17.7          self._dual_name = np.hstack((self._dual_name[:, 0:N1 + 1], self._dual_name[:, N2:]))

Total time: 2.2228 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\SCLP_solution.py
Function: update_caseII at line 60

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    60                                               ####'#@profile
    61                                               def update_caseII(self, N1, N2, prim_name, dual_name, dx, dq, AAN1, AAN2, pivots = None, basis = None):
    62       613       5022.0      8.2      0.1          Nnew = prim_name.shape[1]
    63       613    2423582.0   3953.6     40.0          self._base_sequence.replace_bases(N1, N2, Nnew, AAN1, AAN2)
    64       613       7745.0     12.6      0.1          NNold = self.NN
    65       613       1283.0      2.1      0.0          if pivots is not None and len(pivots) > 0:
    66        13         42.0      3.2      0.0              if N1 > 0:
    67        13         98.0      7.5      0.0                  if N2 - 1 == self.NN:
    68                                                               self._pivots = self._pivots[0:N1] + pivots
    69                                                           else:
    70        13        456.0     35.1      0.0                      self._pivots = self._pivots[0:N1] + pivots + self._pivots[N2:]
    71                                                       else:
    72                                                           self._pivots = pivots + self._pivots[N2:]
    73                                                   else:
    74       600       9816.0     16.4      0.2              pivots_new = self._pivots[0:N1 + 1]
    75       600       1875.0      3.1      0.0              if N1 >= 0:
    76       573     313332.0    546.8      5.2                  piv = np.setdiff1d(self._prim_name[:, N1], prim_name[:, 0], assume_unique=True).tolist() + \
    77       573     324223.0    565.8      5.3                                       np.setdiff1d(self._dual_name[:, N1], dual_name[:, 0], assume_unique=True).tolist()
    78       573       4178.0      7.3      0.1                  if len(pivots_new) > N1:
    79       278        941.0      3.4      0.0                      pivots_new[N1] = piv
    80                                                           else:
    81       295       1863.0      6.3      0.0                      pivots_new.append(piv)
    82       600       5255.0      8.8      0.1              for nn in range(Nnew - 1):
    83                                                           pivots_new.append(np.setdiff1d(prim_name[:, nn], prim_name[:, nn + 1], assume_unique=True).tolist()
    84                                                                             + np.setdiff1d(dual_name[:, nn], dual_name[:, nn + 1], assume_unique=True).tolist())
    85       600       1819.0      3.0      0.0              if N2 < NNold:
    86       305     120591.0    395.4      2.0                  pivots_new.append(np.setdiff1d(prim_name[:, -1], self._prim_name[:, N2], assume_unique=True).tolist()
    87       305     156078.0    511.7      2.6                                    + np.setdiff1d(dual_name[:, -1], self._dual_name[:, N2], assume_unique=True).tolist())
    88       305       3226.0     10.6      0.1                  if len(self._pivots[N2:]) > 0:
    89       293       2047.0      7.0      0.0                      pivots_new += (self._pivots[N2:])
    90       600       3933.0      6.6      0.1              self._pivots = pivots_new
    91       613    1386828.0   2262.4     22.9          self._prim_name = np.hstack((self._prim_name[:, :N1 + 1], prim_name, self._prim_name[:, N2:]))
    92       613    1162259.0   1896.0     19.2          self._dual_name = np.hstack((self._dual_name[:, :N1 + 1], dual_name, self._dual_name[:, N2:]))
    93       613      82933.0    135.3      1.4          self._dx.replace_matrix(N1 + 1, N2, dx)
    94       613      44576.0     72.7      0.7          self._dq.replace_matrix(N1 + 1, N2, dq)

Total time: 0 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\SCLP_solution.py
Function: update_rewind at line 96

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    96                                               ####'#@profile
    97                                               def update_rewind(self, N1, N2, Nnew, prim_name, dual_name, dx, dq, pivots):
    98                                                   N2_cor = N2 + Nnew
    99                                                   N2b = max(N2, N2_cor)
   100                                                   self._base_sequence.remove_bases(N1, N2b, self._pivots, Nnew)
   101                                                   Npivots = len(pivots)
   102                                                   if N1 > 0:
   103                                                       if N2_cor - 1 == self.NN:
   104                                                           self._pivots = self._pivots[0:N1] + pivots
   105                                                       else:
   106                                                           self._pivots = self._pivots[0:N1] + pivots + self._pivots[N1 + Nnew + Npivots:]
   107                                                   else:
   108                                                       self._pivots = pivots + self._pivots[(N1 + Nnew + Npivots):]
   109                                                   self._prim_name = np.hstack((self._prim_name[:, :N1 + 1], prim_name, self._prim_name[:, N2_cor:]))
   110                                                   self._dual_name = np.hstack((self._dual_name[:, :N1 + 1], dual_name, self._dual_name[:, N2_cor:]))
   111                                                   self._dx.replace_matrix(N1 + 1, N2, dx)
   112                                                   self._dq.replace_matrix(N1 + 1, N2, dq)

Total time: 21.038 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\SCLP_solution.py
Function: get_basis_at at line 114

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   114                                               ####'#@profile
   115                                               def get_basis_at(self, place):
   116       925   57335931.0  61984.8     99.9          new_mat, new_place = self._base_sequence.get_basis_at(place, self._pivots)
   117       925      56382.0     61.0      0.1          self._base_sequence.insert_basis(new_mat, new_place)
   118       925       1218.0      1.3      0.0          return new_mat

Total time: 10.0235 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\SCLP_solution.py
Function: get_bases at line 120

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   120                                               ####'#@profile
   121                                               def get_bases(self, N1, N2):
   122       279     884230.0   3169.3      3.2          new_mat, new_place = self._base_sequence.get_nearby_basis(N1, N2, self._pivots)
   123       279       4670.0     16.7      0.0          self._base_sequence.insert_basis(new_mat, new_place)
   124       279        423.0      1.5      0.0          if new_place == N1:
   125       274   25981554.0  94823.2     95.0              return new_mat, self.get_basis_at(N2)
   126         5          7.0      1.4      0.0          elif new_place == N2:
   127         5     474190.0  94838.0      1.7              return self.get_basis_at(N1), new_mat
   128                                                   else:
   129                                                       raise Exception('Cannot calculate correct bases!')

Total time: 0 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\SCLP_solver4.py
Function: SCLP_solver at line 12

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    12                                           ####'#@profile
    13                                           def SCLP_solver(x_0, del_x_0, q_N, del_q_N, T, del_T, prim_name, dual_name, ThetaBar, cases, B1, B2, pivots,
    14                                                             base_sequence, totalK, totalJ, DEPTH, STEPCOUNT, ITERATION, settings, tolerance):
    15                                           
    16                                               ITERATION[DEPTH] = 0
    17                                               if  len(prim_name.shape) > 1:
    18                                                   pn = prim_name[:, 0]
    19                                               else:
    20                                                   pn = prim_name
    21                                               if len(dual_name.shape) > 1:
    22                                                   dn = dual_name[:, 0]
    23                                               else:
    24                                                   dn = dual_name
    25                                               klist = np.sort(np.append(pn[pn > 0], dn[dn > 0]))
    26                                               jlist = np.sort(-np.append(pn[pn < 0], dn[dn < 0]))
    27                                           
    28                                               KK = len(klist)
    29                                               JJ = len(jlist)
    30                                           
    31                                               theta = 0
    32                                               tol_coeff = 1  # tolerance multiplier
    33                                               prevProblem = 0
    34                                               lastCollision = dict()
    35                                           
    36                                               Kset_0 = klist[np.hstack(np.logical_or(x_0 > 0, np.logical_and(x_0 == 0, del_x_0 > 0)))]
    37                                               Jset_N = jlist[np.hstack(np.logical_or(q_N > 0, np.logical_and(q_N == 0, del_q_N > 0)))]
    38                                           
    39                                               while cases != 'complete' and cases != 'solved__':
    40                                           
    41                                                   # Kset_0 = klist[np.logical_or(np.hstack(x_0) > 0, np.logical_and(np.hstack(x_0) == 0, np.hstack(del_x_0) > 0))]
    42                                                   # Jset_N = jlist[np.logical_or(np.hstack(q_N) > 0, np.logical_and(np.hstack(q_N) == 0, np.hstack(del_q_N) > 0))]
    43                                           
    44                                                   spdx = sp.bmat([base_sequence['dx']])
    45                                                   spdq = sp.bmat([base_sequence['dq']])
    46                                           
    47                                                   if(len(set(base_sequence['places'])) < len(base_sequence['places'])):
    48                                                       print('hwew')
    49                                           
    50                                                   dx = spdx.toarray()
    51                                                   dq = spdq.toarray()
    52                                                   sdx = np.sign(dx)
    53                                                   sdq = np.sign(dq)
    54                                                   check_sd(sdx, True)
    55                                                   check_sd(sdq, False)
    56                                                   if STEPCOUNT == 11370:
    57                                                       print('bbb')
    58                                           
    59                                                   tau, dtau = calc_equations(klist, jlist, pivots, x_0, del_x_0, q_N, del_q_N, T, del_T, dx, dq)
    60                                                   x, del_x, q, del_q = calc_states(dx, dq, x_0, del_x_0, q_N, del_q_N, tau, dtau, sdx, sdq, tolerance)
    61                                                   cases, Delta, N1, N2, v1, v2, problem = classification(tau, dtau, klist, jlist, dx, dq, x, del_x, q, del_q,
    62                                                                                                          prim_name, B1, B2, sdx, sdq, tolerance, 1)
    63                                                   if problem['result'] == 1 or problem['result'] == 2 or problem['result'] == 3:
    64                                                       #TODO: review next if for bugs
    65                                                       if problem['result'] == 2 and problem['timeProblem']['result'] == 2 and tol_coeff > 10000 and\
    66                                                               len(np.intersect1d(problem['timeProblem']['data'], np.arange(lastCollision['N1']+1, lastCollision['N2']), assume_unique=True))==0:
    67                                                           tol_coeff = 0.1
    68                                                           while problem['result'] == 2 and tol_coeff > 0.0001:
    69                                                               print('trying to resolve * ', tol_coeff, ' ...')
    70                                                               cases, Delta, N1, N2, v1, v2, problem = classification(tau, dtau, klist, jlist, dx, dq, x, del_x, q,
    71                                                                                                                  del_q,
    72                                                                                                                  prim_name, B1, B2, sdx, sdq, tolerance, tol_coeff)
    73                                                               tol_coeff = 0.1 * tol_coeff
    74                                                           tol_coeff = 1
    75                                                       else:
    76                                                           tol_coeff = 10 * tol_coeff
    77                                                           prevProblem = problem['result']
    78                                                           if 'data' in problem.keys():
    79                                                               print('Problem data: ',str(problem['data']))
    80                                                   elif problem['result'] == 4:
    81                                                       print('More than two variables leave in time shrink ....')
    82                                                       while tol_coeff <= 10000 and problem['result'] == 4:
    83                                                           if tol_coeff < 10 and prevProblem !=2:
    84                                                               if N2 - N1 == 2 or tol_coeff <= 0.001:
    85                                                                   tol_coeff = 10
    86                                                               else:
    87                                                                   tol_coeff = 0.1 * tol_coeff
    88                                                           else:
    89                                                               tol_coeff = 10 * tol_coeff
    90                                                           print('trying to resolve * ', tol_coeff, ' ...')
    91                                                           cases, Delta, N1, N2, v1, v2, problem = classification(tau, dtau, klist, jlist, dx, dq, x, del_x, q, del_q,
    92                                                                                                              prim_name, B1, B2, sdx, sdq, tolerance, tol_coeff)
    93                                                       if problem['result'] == 0:
    94                                                           tol_coeff = 1
    95                                                           print('ok!')
    96                                                       else:
    97                                                           print('fail!')
    98                                                       prevProblem = 4
    99                                                   else:
   100                                                       tol_coeff = 1
   101                                                       prevProblem = problem['result']
   102                                           
   103                                                   if problem['result'] > 0 and DEPTH == 0:
   104                                                       if lastCollision['cases'] == 'Case ii_':
   105                                                           # rewinding to previous iteration
   106                                                           print('rewind... trying to resolve * ', tol_coeff, ' ...')
   107                                                           Delta = lastCollision['Delta']
   108                                                           x_0 = x_0 - del_x_0 * Delta
   109                                                           q_N = q_N - del_q_N * Delta
   110                                                           T = T - del_T * Delta
   111                                                           theta = theta - Delta
   112                                                           N1 = lastCollision['N1']
   113                                                           N2 = lastCollision['N2']
   114                                                           #             v1 = lastCollision.v2 #change varible order
   115                                                           #             v2 = lastCollision.v1 #change varible order
   116                                                           Nnew = lastCollision['Nnew']
   117                                                           N2_cor = N2+Nnew
   118                                                           N2b = max(N2, N2_cor)
   119                                                           lplaces = np.logical_or(np.array(base_sequence['places']) <= N1,
   120                                                                                   np.array(base_sequence['places']) >= N2b)
   121                                                           places = find(lplaces)
   122                                                           if len(places) == 0:
   123                                                               newMat, newPlace = calc_dict(base_sequence, N1, N2b, pivots)
   124                                                               base_sequence['bases'] = [newMat]
   125                                                               base_sequence['places'] = [newPlace]
   126                                                           else:
   127                                                               base_sequence['bases'] = [base_sequence['bases'][i] for i in places]
   128                                                               newPlace = [base_sequence['places'][i] for i in places]
   129                                                               base_sequence['places'] = [v if v < N2b else v - Nnew for v in newPlace]
   130                                                           Npivots = len(lastCollision['old_pivots'])
   131                                                           if N1 > 0:
   132                                                               if N2_cor - 1 == len(base_sequence['dx']):
   133                                                                       pivots = pivots[0:N1] + lastCollision['old_pivots']
   134                                                               else:
   135                                                                   pivots = pivots[0:N1] + lastCollision['old_pivots'] + pivots[N1 + Nnew + Npivots:]
   136                                                           else:
   137                                                               pivots = lastCollision['old_pivots'] + pivots[(N1 + Nnew + Npivots):]
   138                                                           prim_name = np.hstack((prim_name[:, 0:N1+1], lastCollision['old_pn'], prim_name[:, N2_cor:]))
   139                                                           dual_name = np.hstack((dual_name[:, 0:N1+1], lastCollision['old_dn'], dual_name[:, N2_cor:]))
   140                                                           base_sequence['dx'] = base_sequence['dx'][0:N1+1] + lastCollision['old_dx'] + base_sequence['dx'][N2_cor:]
   141                                                           base_sequence['dq'] = base_sequence['dq'][0:N1+1] + lastCollision['old_dq'] + base_sequence['dq'][N2_cor:]
   142                                                           # Kset_0 = klist[np.logical_or(x_0 > 0, np.logical_and(x_0 == 0, del_x_0 > 0))]
   143                                                           # Jset_N = jlist[np.logical_or(q_N > 0, np.logical_and(q_N == 0, del_q_N > 0))]
   144                                                           # flag = True
   145                                                           #             if problem.result == 2
   146                                                           #                 nn1 = min(problem.timeProblem.data)
   147                                                           #                 nn2 = max(problem.timeProblem.data)
   148                                                           #                 if length(problem.timeProblem.data) == length(nn1:nn2)
   149                                                           #                     if nn1 <= N1
   150                                                           #                         N1 = nn1 - 1
   151                                                           #                     end
   152                                                           #                     N2 = nn2 - Nnew + Nold + 1
   153                                                           #                     v1 = lastCollision.v1
   154                                                           #                     v2 = lastCollision.v2
   155                                                           #                     cases = lastCollision.cases
   156                                                           #                 else
   157                                                           #                     flag= true
   158                                                           #                 end
   159                                                           #             else
   160                                                           #                 flag = true
   161                                                           #             end
   162                                                           spdx = sp.hstack(base_sequence['dx'])
   163                                                           spdq = sp.hstack(base_sequence['dq'])
   164                                                           dx = spdx.toarray()
   165                                                           dq = spdq.toarray()
   166                                                           sdx = np.sign(dx)
   167                                                           sdq = np.sign(dq)
   168                                           
   169                                                           tau, dtau = calc_equations(klist, jlist, pivots, x_0, del_x_0, q_N, del_q_N, T, del_T, dx, dq)
   170                                                           x, del_x, q, del_q = calc_states(dx, dq, x_0, del_x_0, q_N, del_q_N, tau, dtau, sdx, sdq, tolerance)
   171                                                           cases, Delta, N1, N2, v1, v2, problem = classification(tau, dtau, klist, jlist, dx, dq, x, del_x, q,
   172                                                                                                                  del_q,
   173                                                                                                                  prim_name, B1, B2, sdx, sdq, tolerance, tol_coeff)
   174                                                           if problem['result'] == 4:
   175                                                               while tol_coeff >= 0.001 and problem['result'] == 4:
   176                                                                   if tol_coeff >= 10:
   177                                                                       if tol_coeff <= 1000:
   178                                                                           tol_coeff = 10 * tol_coeff
   179                                                                       else:
   180                                                                           tol_coeff = 0.1
   181                                                                   else:
   182                                                                       tol_coeff = 0.1 * tol_coeff
   183                                                                   print('trying to resolve * ', tol_coeff, ' ...')
   184                                                                   cases, Delta, N1, N2, v1, v2, problem = classification(tau, dtau, klist, jlist, dx, dq, x,
   185                                                                                                                          del_x, q, del_q, prim_name, B1, B2,
   186                                                                                                                          sdx, sdq, tolerance, tol_coeff)
   187                                                                   if problem['result'] == 0:
   188                                                                       tol_coeff = 1
   189                                                                       print('ok!')
   190                                                                   else:
   191                                                                       print('fail!')
   192                                           
   193                                                   if cases == 'complete' and DEPTH > 0:
   194                                                       Delta = min(0.1 * theta, (1 - theta) / 2)
   195                                           
   196                                                   if DEPTH == 0 and theta + Delta > ThetaBar:
   197                                                       cases = 'solved__'
   198                                                       Delta = ThetaBar - theta
   199                                           
   200                                                   if cases == 'complete' and DEPTH == 0:
   201                                                       Delta = 0.1 * theta
   202                                           
   203                                                   NN = len(tau)
   204                                                   STEPCOUNT = STEPCOUNT + 1
   205                                           
   206                                                   ITERATION[DEPTH] = ITERATION[DEPTH] + 1
   207                                                   theta1 = theta + Delta
   208                                           
   209                                                   if theta1 > 1 and DEPTH > 0:
   210                                                       print("Theta > 1....")
   211                                                       #cases = 'theta>1_'
   212                                           
   213                                                   print(STEPCOUNT, DEPTH, ITERATION[DEPTH], JJ, 'x', KK, NN, theta, theta1, cases, N1, N2, v1, v2, len(base_sequence['places']))
   214                                                   lastCollision = {'cases': cases, 'theta': theta, 'Delta': Delta,
   215                                                                            'N1': N1, 'N2': N2, 'v1': v1, 'v2': v2}
   216                                                   if cases == 'Case i__':
   217                                                       base_sequence, pivots, prim_name, dual_name = SCLP_pivot_caseI(base_sequence, pivots, prim_name, dual_name, N1, N2, NN)
   218                                           
   219                                                   elif cases == 'Case ii_' or cases == 'Case iii':
   220                                                       if cases == 'Case ii_':
   221                                                           cor_N1 = N1+1
   222                                                           if N1 > -1:
   223                                                               lastCollision['old_pivots'] = pivots[N1:N2+1].copy()
   224                                                           else:
   225                                                               lastCollision['old_pivots'] = pivots[N1+1:N2+1].copy()
   226                                                           lastCollision['old_dx'] = base_sequence['dx'][cor_N1: N2].copy()
   227                                                           lastCollision['old_dq'] = base_sequence['dq'][cor_N1: N2].copy()
   228                                                           lastCollision['old_pn'] = prim_name[:, cor_N1: N2].copy()
   229                                                           lastCollision['old_dn'] = dual_name[:, cor_N1: N2].copy()
   230                                           
   231                                                       prim_name, dual_name, pivots, base_sequence, STEPCOUNT, ITERATION = SCLP_pivot(Kset_0, Jset_N, prim_name, dual_name, N1, N2, v1,
   232                                                                                                                v2, pivots, base_sequence, KK, JJ, NN, totalK, totalJ, DEPTH,
   233                                                                                                                STEPCOUNT, ITERATION, settings, tolerance)
   234                                           
   235                                                       #statData = {'cases': cases, 'N1': N1, 'N2': N2, 'minBases': settings['minBases'],
   236                                                       #            'maxBases': settings['maxBases'], 'basesRate': settings['basesRate']}
   237                                                       #base_sequence = clearBaseSequence(base_sequence, statData)
   238                                           
   239                                                   lastCollision['Nnew'] = len(base_sequence['dx'])-NN
   240                                                   #print(STEPCOUNT, base_sequence['places'], [sum(EE['A'][0,:]) for EE in base_sequence['bases']])
   241                                                   x_0 = x_0 + del_x_0 * Delta
   242                                                   q_N = q_N + del_q_N * Delta
   243                                                   T = T + del_T * Delta
   244                                                   theta = theta1
   245                                           
   246                                               return prim_name, dual_name, x_0, q_N, T, pivots, base_sequence, STEPCOUNT

Total time: 129.861 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\SCLP_solver5.py
Function: SCLP_solver at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           ####'#@profile
    11                                           def SCLP_solver(solution, x_0, del_x_0, q_N, del_q_N, T, del_T, ThetaBar, cases, B1, B2, klist, jlist, totalK, totalJ, DEPTH, STEPCOUNT, ITERATION, settings, tolerance):
    12                                           
    13        14         79.0      5.6      0.0      ITERATION[DEPTH] = 0
    14                                           
    15        14         88.0      6.3      0.0      KK = len(klist)
    16        14         69.0      4.9      0.0      JJ = len(jlist)
    17                                           
    18        14         56.0      4.0      0.0      theta = 0
    19        14         52.0      3.7      0.0      tol_coeff = 1  # tolerance multiplier
    20        14         52.0      3.7      0.0      prevProblem = 0
    21        14         76.0      5.4      0.0      lastCollision = dict()
    22                                           
    23        14      47866.0   3419.0      0.0      Kset_0 = klist[np.hstack(np.logical_or(x_0 > 0, np.logical_and(x_0 == 0, del_x_0 > 0)))]
    24        14     276434.0  19745.3      0.1      Jset_N = jlist[np.hstack(np.logical_or(q_N > 0, np.logical_and(q_N == 0, del_q_N > 0)))]
    25                                           
    26       634       4250.0      6.7      0.0      while cases != 'complete' and cases != 'solved__':
    27                                           
    28       620      37978.0     61.3      0.0          if not solution.base_sequence.check_places():
    29                                                       raise Exception('Bases placement failure!')
    30                                           
    31       620   12677318.0  20447.3      3.6          dx = solution.dx.get_matrix()
    32       620   12479584.0  20128.4      3.5          dq = solution.dq.get_matrix()
    33       620    1991435.0   3212.0      0.6          sdx = np.sign(dx)
    34       620    2076400.0   3349.0      0.6          sdq = np.sign(dq)
    35       620    2535868.0   4090.1      0.7          check_sd(sdx, True)
    36       620    2520949.0   4066.0      0.7          check_sd(sdq, False)
    37       620       5266.0      8.5      0.0          if STEPCOUNT == 11370:
    38                                                       print('bbb')
    39                                           
    40       620    8446930.0  13624.1      2.4          tau, dtau = calc_equations(klist, jlist, solution.pivots, x_0, del_x_0, q_N, del_q_N, T, del_T, dx, dq)
    41       620   57885382.0  93363.5     16.3          x, del_x, q, del_q = calc_states(dx, dq, x_0, del_x_0, q_N, del_q_N, tau, dtau, sdx, sdq, tolerance)
    42       620       6543.0     10.6      0.0          cases, Delta, N1, N2, v1, v2, problem = classification(tau, dtau, klist, jlist, dx, dq, x, del_x, q, del_q,
    43       620   32763481.0  52844.3      9.2                                                                 solution.prim_name, B1, B2, sdx, sdq, tolerance, 1)
    44       620       5020.0      8.1      0.0          if problem['result'] == 1 or problem['result'] == 2 or problem['result'] == 3:
    45                                                       #TODO: review next if for bugs
    46                                                       if problem['result'] == 2 and problem['timeProblem']['result'] == 2 and tol_coeff > 10000 and\
    47                                                               len(np.intersect1d(problem['timeProblem']['data'], np.arange(lastCollision['N1']+1, lastCollision['N2']), assume_unique=True))==0:
    48                                                           tol_coeff = 0.1
    49                                                           while problem['result'] == 2 and tol_coeff > 0.0001:
    50                                                               print('trying to resolve * ', tol_coeff, ' ...')
    51                                                               cases, Delta, N1, N2, v1, v2, problem = classification(tau, dtau, klist, jlist, dx, dq, x, del_x, q,
    52                                                                                                                  del_q,
    53                                                                                                                  solution.prim_name, B1, B2, sdx, sdq, tolerance, tol_coeff)
    54                                                               tol_coeff = 0.1 * tol_coeff
    55                                                           tol_coeff = 1
    56                                                       else:
    57                                                           tol_coeff = 10 * tol_coeff
    58                                                           prevProblem = problem['result']
    59                                                           if 'data' in problem.keys():
    60                                                               print('Problem data: ',str(problem['data']))
    61       620       3313.0      5.3      0.0          elif problem['result'] == 4:
    62                                                       print('More than two variables leave in time shrink ....')
    63                                                       while tol_coeff <= 10000 and problem['result'] == 4:
    64                                                           if tol_coeff < 10 and prevProblem !=2:
    65                                                               if N2 - N1 == 2 or tol_coeff <= 0.001:
    66                                                                   tol_coeff = 10
    67                                                               else:
    68                                                                   tol_coeff = 0.1 * tol_coeff
    69                                                           else:
    70                                                               tol_coeff = 10 * tol_coeff
    71                                                           print('trying to resolve * ', tol_coeff, ' ...')
    72                                                           cases, Delta, N1, N2, v1, v2, problem = classification(tau, dtau, klist, jlist, dx, dq, x, del_x, q, del_q,
    73                                                                                                              solution.prim_name, B1, B2, sdx, sdq, tolerance, tol_coeff)
    74                                                       if problem['result'] == 0:
    75                                                           tol_coeff = 1
    76                                                           print('ok!')
    77                                                       else:
    78                                                           print('fail!')
    79                                                       prevProblem = 4
    80                                                   else:
    81       620       3291.0      5.3      0.0              tol_coeff = 1
    82       620       3035.0      4.9      0.0              prevProblem = problem['result']
    83                                           
    84       620       3190.0      5.1      0.0          if problem['result'] > 0 and DEPTH == 0:
    85                                                       if lastCollision['cases'] == 'Case ii_':
    86                                                           # rewinding to previous iteration
    87                                                           print('rewind... trying to resolve * ', tol_coeff, ' ...')
    88                                                           Delta = lastCollision['Delta']
    89                                                           x_0 = x_0 - del_x_0 * Delta
    90                                                           q_N = q_N - del_q_N * Delta
    91                                                           T = T - del_T * Delta
    92                                                           theta = theta - Delta
    93                                                           #             v1 = lastCollision.v2 #change varible order
    94                                                           #             v2 = lastCollision.v1 #change varible order
    95                                                           solution.update_rewind(lastCollision['N1'], lastCollision['N2'], lastCollision['Nnew'],
    96                                                                                  lastCollision['old_pn'], lastCollision['old_dn'],
    97                                                                                  lastCollision['old_dx'], lastCollision['old_dq'], lastCollision['old_pivots'])
    98                                                           dx = solution.dx.get_matrix()
    99                                                           dq = solution.dq.get_matrix()
   100                                                           sdx = np.sign(dx)
   101                                                           sdq = np.sign(dq)
   102                                           
   103                                                           tau, dtau = calc_equations(klist, jlist, solution.pivots, x_0, del_x_0, q_N, del_q_N, T, del_T, dx, dq)
   104                                                           x, del_x, q, del_q = calc_states(dx, dq, x_0, del_x_0, q_N, del_q_N, tau, dtau, sdx, sdq, tolerance)
   105                                                           cases, Delta, N1, N2, v1, v2, problem = classification(tau, dtau, klist, jlist, dx, dq, x, del_x, q,
   106                                                                                                                  del_q,
   107                                                                                                                  prim_name, B1, B2, sdx, sdq, tolerance, tol_coeff)
   108                                                           if problem['result'] == 4:
   109                                                               while tol_coeff >= 0.001 and problem['result'] == 4:
   110                                                                   if tol_coeff >= 10:
   111                                                                       if tol_coeff <= 1000:
   112                                                                           tol_coeff = 10 * tol_coeff
   113                                                                       else:
   114                                                                           tol_coeff = 0.1
   115                                                                   else:
   116                                                                       tol_coeff = 0.1 * tol_coeff
   117                                                                   print('trying to resolve * ', tol_coeff, ' ...')
   118                                                                   cases, Delta, N1, N2, v1, v2, problem = classification(tau, dtau, klist, jlist, dx, dq, x,
   119                                                                                                                          del_x, q, del_q, prim_name, B1, B2,
   120                                                                                                                          sdx, sdq, tolerance, tol_coeff)
   121                                                                   if problem['result'] == 0:
   122                                                                       tol_coeff = 1
   123                                                                       print('ok!')
   124                                                                   else:
   125                                                                       print('fail!')
   126                                           
   127       620       3575.0      5.8      0.0          if cases == 'complete' and DEPTH > 0:
   128        13        236.0     18.2      0.0              Delta = min(0.1 * theta, (1 - theta) / 2)
   129                                           
   130       620       5158.0      8.3      0.0          if DEPTH == 0 and theta + Delta > ThetaBar:
   131         1          6.0      6.0      0.0              cases = 'solved__'
   132         1         10.0     10.0      0.0              Delta = ThetaBar - theta
   133                                           
   134       620       3214.0      5.2      0.0          if cases == 'complete' and DEPTH == 0:
   135                                                       Delta = 0.1 * theta
   136                                           
   137       620       4736.0      7.6      0.0          NN = len(tau)
   138       620       3770.0      6.1      0.0          STEPCOUNT = STEPCOUNT + 1
   139                                           
   140       620       4216.0      6.8      0.0          ITERATION[DEPTH] = ITERATION[DEPTH] + 1
   141       620       3261.0      5.3      0.0          theta1 = theta + Delta
   142                                           
   143       620       3889.0      6.3      0.0          if theta1 > 1 and DEPTH > 0:
   144                                                       print("Theta > 1....")
   145                                                       #cases = 'theta>1_'
   146                                           
   147       620     795191.0   1282.6      0.2          print(STEPCOUNT, DEPTH, ITERATION[DEPTH], JJ, 'x', KK, NN, theta, theta1, cases, N1, N2, v1, v2, len(solution.base_sequence.places))
   148       620       4388.0      7.1      0.0          lastCollision = {'cases': cases, 'theta': theta, 'Delta': Delta,
   149       620      12830.0     20.7      0.0                                   'N1': N1, 'N2': N2, 'v1': v1, 'v2': v2}
   150       620       3319.0      5.4      0.0          if cases == 'Case i__':
   151         7     126029.0  18004.1      0.0              solution.update_caseI(N1, N2)
   152                                           
   153       613       3889.0      6.3      0.0          elif cases == 'Case ii_' or cases == 'Case iii':
   154       599       2931.0      4.9      0.0              if cases == 'Case ii_':
   155       278       2421.0      8.7      0.0                  cor_N1 = N1+1
   156       278       1782.0      6.4      0.0                  if N1 > -1:
   157       278       5565.0     20.0      0.0                      lastCollision['old_pivots'] = solution.pivots[N1:N2+1].copy()
   158                                                           else:
   159                                                               lastCollision['old_pivots'] = solution.pivots[N1+1:N2+1].copy()
   160       278      18955.0     68.2      0.0                  lastCollision['old_dx'] = solution.dx.get_sub_matrix(cor_N1, N2)
   161       278      11532.0     41.5      0.0                  lastCollision['old_dq'] = solution.dq.get_sub_matrix(cor_N1, N2)
   162       278      15382.0     55.3      0.0                  lastCollision['old_pn'] = solution.prim_name[:, cor_N1: N2].copy()
   163       278      22372.0     80.5      0.0                  lastCollision['old_dn'] = solution.dual_name[:, cor_N1: N2].copy()
   164                                           
   165       599       3793.0      6.3      0.0              solution, STEPCOUNT, ITERATION = SCLP_pivot(Kset_0, Jset_N, solution, N1, N2, v1,
   166       599       2965.0      4.9      0.0                                                                       v2, KK, JJ, NN, totalK, totalJ, DEPTH,
   167       599  219315146.0 366135.5     61.9                                                                       STEPCOUNT, ITERATION, settings, tolerance)
   168                                           
   169                                                       #statData = {'cases': cases, 'N1': N1, 'N2': N2, 'minBases': settings['minBases'],
   170                                                       #            'maxBases': settings['maxBases'], 'basesRate': settings['basesRate']}
   171                                                       #base_sequence = clearBaseSequence(base_sequence, statData)
   172                                           
   173       620      12392.0     20.0      0.0          lastCollision['Nnew'] = solution.NN-NN
   174       620      56877.0     91.7      0.0          x_0 = x_0 + del_x_0 * Delta
   175       620      40024.0     64.6      0.0          q_N = q_N + del_q_N * Delta
   176       620       7136.0     11.5      0.0          T = T + del_T * Delta
   177       620       2920.0      4.7      0.0          theta = theta1
   178                                           
   179        14         61.0      4.4      0.0      return solution, x_0, q_N, T, STEPCOUNT

Total time: 0 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\SCLP_subproblem4.py
Function: SCLP_subproblem at line 8

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                           ####'#@profile
     9                                           def SCLP_subproblem(pbaseDD,dbaseDD,DD, N1,N2,v1,v2,Kexclude,Jexclude,pbaseB1,pbaseB2,
    10                                                                AAN1,AAN2, KK, JJ, NN, totalK, totalJ, DEPTH, STEPCOUNT, ITERATION, settings, tolerance):
    11                                           
    12                                           
    13                                               #[~, NN] = size(prim_name)
    14                                               # Excluding the k's and j's which are > 0
    15                                               lKDDin = np.logical_not(np.in1d(pbaseDD, Kexclude, assume_unique=True))
    16                                               lJDDin = np.logical_not(np.in1d(dbaseDD, -Jexclude, assume_unique=True))
    17                                               # size(pbaseDD)
    18                                               # size(dbaseDD)
    19                                               pbaseDDred = pbaseDD[lKDDin]
    20                                               dbaseDDred = dbaseDD[lJDDin]
    21                                               DDred = DD[find(np.hstack(([True],lKDDin)))[:,None], find(np.hstack(([True],lJDDin)))]
    22                                               if len(pbaseB1) > 0:
    23                                                   pbaseB1red = pbaseB1[np.logical_not(np.in1d(pbaseB1,Kexclude, assume_unique=True))]
    24                                               else:
    25                                                   pbaseB1red = []
    26                                               if len(pbaseB2) > 0:
    27                                                   pbaseB2red = pbaseB2[np.logical_not(np.in1d(pbaseB2,Kexclude, assume_unique=True))]
    28                                               else:
    29                                                   pbaseB2red = []
    30                                           
    31                                               klist = np.sort(np.append(pbaseDDred[pbaseDDred > 0], dbaseDDred[dbaseDDred > 0]))
    32                                               jlist = np.sort(-np.append(pbaseDDred[pbaseDDred < 0], dbaseDDred[dbaseDDred < 0]))
    33                                           
    34                                               lk = np.size(klist)
    35                                               lj = np.size(jlist)
    36                                           
    37                                               # The starting sequence
    38                                               pn1 = np.vstack(pbaseDDred)
    39                                               dn1 = np.vstack(dbaseDDred)
    40                                               dx, dq = extract_rates(pbaseDDred, dbaseDDred, DDred, lk, lj, totalK, totalJ)
    41                                               new_base_sequence = {'dx': [dx], 'dq': [dq], 'bases': [{'prim_name': pbaseDDred, 'dual_name': dbaseDDred,'A': DDred.copy()}],
    42                                                                    'places': [0]}
    43                                               pivots=[]
    44                                               # performing the left and right first pivots
    45                                               #		the right pivot:
    46                                               if np.size(pbaseB2red) > 0:
    47                                                   if not isinstance(v1, list):
    48                                                       if v1 > 0:
    49                                                           K_0 = [v1]
    50                                                           J_N = []
    51                                                       else:
    52                                                           K_0 = []
    53                                                           J_N = [-v1]
    54                                                   else:
    55                                                       K_0 = []
    56                                                       J_N = []
    57                                                   if not isinstance(v2, list):
    58                                                       if v2 < 0:
    59                                                           J_N.append(-v2)
    60                                                   from .SCLP_pivot4 import SCLP_pivot
    61                                                   pn1,dn1,pivots,new_base_sequence, STEPCOUNT, ITERATION = SCLP_pivot(K_0,J_N,pn1,dn1,0,1,[],v1,pivots, new_base_sequence,
    62                                                                                                                       lk, lj, 1, totalK, totalJ, DEPTH, STEPCOUNT, ITERATION, settings, tolerance)
    63                                               #		the left pivot:
    64                                               if np.size(pbaseB1red) > 0:
    65                                                   if not isinstance(v2, list):
    66                                                       if v2 > 0:
    67                                                           K_0 = [v2]
    68                                                           J_N = []
    69                                                       else:
    70                                                           K_0 = []
    71                                                           J_N = [-v2]
    72                                                   else:
    73                                                       K_0 = []
    74                                                       J_N = []
    75                                                   if not isinstance(v1, list):
    76                                                       if v1 > 0:
    77                                                           K_0.append(v1)
    78                                                   from .SCLP_pivot4 import SCLP_pivot
    79                                                   pn1,dn1,pivots,new_base_sequence, STEPCOUNT, ITERATION = SCLP_pivot(K_0,J_N,pn1,dn1,-1,0,v2,[],pivots,new_base_sequence,
    80                                                                                                                       lk, lj, 1, totalK, totalJ, DEPTH, STEPCOUNT, ITERATION, settings, tolerance)
    81                                               # prepare the boundaries
    82                                               T = 1
    83                                               del_T = 0
    84                                           
    85                                               x_0=np.zeros((lk,1))
    86                                               q_N=np.zeros((lj,1))
    87                                               del_x_0=np.zeros((lk,1))
    88                                               del_q_N=np.zeros((lj,1))
    89                                           
    90                                               # Boundary values for one sided subproblem, collision at t=0
    91                                               if N1 == -1:
    92                                                   # The case of v1 > 0, collision case iv_a
    93                                                   if not isinstance(v1, list) and v1 > 0:
    94                                                       dx_DD_v1 = DD[1:,0][pbaseDD == v1][0]
    95                                                       lk1 = klist == v1
    96                                                       x_0[lk1] = -dx_DD_v1
    97                                                       del_x_0[lk1] = dx_DD_v1
    98                                                   # The case of v1 < 0, collision case iii_a
    99                                                   if not isinstance(v1, list) and v1 < 0:
   100                                                       #dq_B2_v1 = AA( 1, j1B2 + 1, N2 )
   101                                                       dq_B2_v1 = AAN2['A'][0,1:][AAN2['dual_name'] == v1][0]
   102                                                       lj1 = jlist == -v1
   103                                                       #q_N[lj1] = 0
   104                                                       del_q_N[lj1] = -dq_B2_v1
   105                                               #
   106                                               #
   107                                               # Boundary values for one sided subproblem, collision at t=T
   108                                               elif N2 == NN:
   109                                                   # The case of v2 > 0, collision case iii_b
   110                                                   if not isinstance(v2, list) and v2 > 0:
   111                                                       #dx_B1_v2 = AA( i2B1 + 1, 1, N1 )
   112                                                       dx_B1_v2 = AAN1['A'][1:,0][AAN1['prim_name'] == v2][0]
   113                                                       lk2 = klist == v2
   114                                                       #x_0[lk2] = 0
   115                                                       del_x_0[lk2] = -dx_B1_v2
   116                                                   # The case of v2 < 0, collision case iv_b
   117                                                   if not isinstance(v2, list) and v2 < 0:
   118                                                       dq_DD_v2 = DD[0,1:][dbaseDD == v2][0]
   119                                                       lj2 = jlist == -v2
   120                                                       q_N[lj2] = -dq_DD_v2
   121                                                       del_q_N[lj2] = dq_DD_v2
   122                                               #
   123                                               #
   124                                               # Boundary values for two sided subproblem, collision at 0<t<T
   125                                               #  setting boundaries for the second exiting variable v1
   126                                               else:
   127                                                   if not isinstance(v1, list) and v1 > 0:
   128                                                       dx_DD_v1 = DD[1:,0][pbaseDD == v1][0]
   129                                                       lk1 = klist == v1
   130                                                       x_0[lk1] = -dx_DD_v1
   131                                                       #dx_B1_v1 = AA( i1B1 + 1, 1, N1 )
   132                                                       dx_B1_v1 = AAN1['A'][1:,0][AAN1['prim_name'] == v1][0]
   133                                                       del_x_0[lk1] = -0.5*dx_B1_v1 + dx_DD_v1
   134                                                   if not isinstance(v1, list) and v1 < 0:
   135                                                       #dq_B2_v1 = AA( 1, j1B2 + 1, N2 )
   136                                                       dq_B2_v1 = AAN2['A'][0,1:][AAN2['dual_name'] == v1][0]
   137                                                       lj1 = jlist == -v1
   138                                                       #q_N(j1) = 0
   139                                                       del_q_N[lj1] = -0.5*dq_B2_v1
   140                                                   #  setting boundaries for the first exiting variable v2
   141                                                   if not isinstance(v2, list) and v2 > 0:
   142                                                       #dx_B1_v2 = AA( i2B1 + 1, 1, N1 )
   143                                                       dx_B1_v2 = AAN1['A'][1:,0][AAN1['prim_name'] == v2][0]
   144                                                       lk2 = klist == v2
   145                                                       #x_0[lk2] = 0
   146                                                       del_x_0[lk2] = -0.5*dx_B1_v2
   147                                                   if not isinstance(v2, list) and v2 < 0:
   148                                                       dq_DD_v2 = DD[0,1:][dbaseDD == v2][0]
   149                                                       lj2 = jlist == -v2
   150                                                       q_N[lj2] = -dq_DD_v2
   151                                                       #dq_B2_v2 = AA(1, j2B2 + 1, N2 )
   152                                                       dq_B2_v2 = AAN2['A'][0,1:][AAN2['dual_name'] == v2][0]
   153                                                       del_q_N[lj2] = -0.5*dq_B2_v2 + dq_DD_v2
   154                                           
   155                                               #############################################
   156                                               # solving the subproblem
   157                                               from .SCLP_solver4 import SCLP_solver
   158                                               pn1,dn1, x_0, q_N, T, pivots,\
   159                                               new_base_sequence, STEPCOUNT = SCLP_solver( x_0, del_x_0, q_N, del_q_N, T, del_T, pn1,dn1, 1,'sub_prob', pbaseB1red,
   160                                                                                           pbaseB2red, pivots, new_base_sequence, totalK, totalJ, DEPTH, STEPCOUNT, ITERATION, settings, tolerance)
   161                                               #############################################
   162                                               # the list of pivots:
   163                                               #[~, ~, pivots] = calc_pivots3(pn1, dn1)
   164                                               Npivots = len(pivots)
   165                                               #Warning this based on assumption that first basis in new_base_sequence is equal to the AAN1 and/or last basis is equal to the AAN2
   166                                               if N1 != -1 and Npivots > 0:
   167                                                   pm1 = AAN1['prim_name']
   168                                                   dm1 = AAN1['dual_name']
   169                                                   pp1 = np.setdiff1d(pn1[:,0], pm1)
   170                                                   pp2 = np.setdiff1d(dn1[:,0], dm1)
   171                                                   if len(pp1) > 1 or len(pp2) > 1:
   172                                                       print('Incomplete pivot...')
   173                                                       raise Exception()
   174                                                   elif len(pp1) == 0 and len(pp2) == 0:
   175                                                       pass
   176                                                   elif len(pp1) == 1 and len(pp2) == 1:
   177                                                       if pivots[0][0] == pp2[0] and pivots[0][1] == pp1[0]:
   178                                                           pass
   179                                                       elif pivots[0][0] != pp2[0] and pivots[0][1] != pp1[0]:
   180                                                           piv = [[pp2[0],pp1[0]]]
   181                                                           pivots = piv + pivots
   182                                                       else:
   183                                                           print('Incompatible pivots...')
   184                                                           raise Exception()
   185                                                   else:
   186                                                       print('Undefined pivot...')
   187                                                       raise Exception()
   188                                                   DD1 = AAN1['A'].copy()
   189                                                   k1 = len(pm1)
   190                                                   l1 = len(dm1)
   191                                                   if N2 != NN:
   192                                                       pp1 = np.setdiff1d(pn1[:, -1], AAN2['prim_name'])
   193                                                       pp2 = np.setdiff1d(dn1[:, -1], AAN2['dual_name'])
   194                                                       if len(pp1) > 1 or len(pp2) > 1:
   195                                                           print('Incomplete pivot...')
   196                                                           raise Exception()
   197                                                       elif len(pp1) == 0 and len(pp2) == 0:
   198                                                           pivots = pivots[:-1]
   199                                                           Npivots -= 1
   200                                                       elif len(pp1) == 1 and len(pp2) == 1:
   201                                                           pass
   202                                                   pn_new=np.empty(shape=(k1,len(pivots)), dtype=int)
   203                                                   #pn_new =np.union1d(pn1, Kexclude)
   204                                                   dn_new=np.empty(shape=(l1,len(pivots)), dtype=int)
   205                                                   new_base_sequence = {'dx': [], 'dq': [], 'bases': [], 'places': []}
   206                                                   zz1 = np.zeros(k1)
   207                                                   zz2 = np.zeros(l1)
   208                                                   for i,piv1 in enumerate(pivots):
   209                                                       DD1,pm1,dm1,zz1,zz2 = full_pivot(DD1,find(pm1==piv1[0])[0],find(dm1==piv1[1])[0],pm1.copy(),dm1.copy(),zz1.copy(),zz2.copy())
   210                                                       pn_new[:,i] = pm1
   211                                                       dn_new[:,i] = dm1
   212                                                       dx, dq = extract_rates(pm1, dm1, DD1, KK, JJ, totalK, totalJ)
   213                                                       new_base_sequence['dx'].append(dx)
   214                                                       new_base_sequence['dq'].append(dq)
   215                                               elif Npivots >0:
   216                                                   pm1 = AAN2['prim_name']
   217                                                   dm1 = AAN2['dual_name']
   218                                                   DD1 = AAN2['A'].copy()
   219                                                   k1 = len(pm1)
   220                                                   l1 = len(dm1)
   221                                                   pn_new = np.empty(shape=(k1, Npivots), dtype=int)
   222                                                   dn_new = np.empty(shape=(l1, Npivots), dtype=int)
   223                                                   new_base_sequence = {'dx': [], 'dq': [], 'bases': [], 'places': []}
   224                                                   zz1 = np.zeros(k1)
   225                                                   zz2 = np.zeros(l1)
   226                                                   for i,piv1 in enumerate(reversed(pivots)):
   227                                                       [DD1,pm1,dm1,zz1,zz2] = full_pivot(DD1,find(pm1==piv1[1]),find(dm1==piv1[0]),pm1.copy(),dm1.copy(),zz1.copy(),zz2.copy())
   228                                                       pn_new[:, Npivots-i-1] = pm1
   229                                                       dn_new[:, Npivots-i-1] = dm1
   230                                                       dx, dq = extract_rates(pm1, dm1, DD1, KK, JJ, totalK, totalJ)
   231                                                       new_base_sequence['dx'].append(dx)
   232                                                       new_base_sequence['dq'].append(dq)
   233                                                   new_base_sequence['dx'].reverse()
   234                                                   new_base_sequence['dq'].reverse()
   235                                               else:
   236                                                   pn_new = np.vstack(np.union1d(pn1[:,0], Kexclude))
   237                                                   dn_new = np.vstack(np.union1d(dn1[:,0], -Jexclude))
   238                                               return  pn_new,dn_new, new_base_sequence, STEPCOUNT, ITERATION

Total time: 2.06406 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\SCLP_subproblem5.py
Function: SCLP_subproblem at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           ####'#@profile
    12                                           def SCLP_subproblem(pbaseDD,dbaseDD,DD, N1,N2,v1,v2,Kexclude,Jexclude,pbaseB1,pbaseB2,
    13                                                                AAN1,AAN2, KK, JJ, NN, totalK, totalJ, DEPTH, STEPCOUNT, ITERATION, settings, tolerance):
    14                                           
    15                                           
    16                                               #[~, NN] = size(prim_name)
    17                                               # Excluding the k's and j's which are > 0
    18        13       4094.0    314.9      0.1      lKDDin = np.logical_not(np.in1d(pbaseDD, Kexclude, assume_unique=True))
    19        13        971.0     74.7      0.0      lJDDin = np.logical_not(np.in1d(dbaseDD, -Jexclude, assume_unique=True))
    20                                               # size(pbaseDD)
    21                                               # size(dbaseDD)
    22        13        312.0     24.0      0.0      pbaseDDred = pbaseDD[lKDDin]
    23        13        157.0     12.1      0.0      dbaseDDred = dbaseDD[lJDDin]
    24        13     136181.0  10475.5      2.4      DDred = DD[find(np.hstack(([True],lKDDin)))[:,None], find(np.hstack(([True],lJDDin)))]
    25        13        275.0     21.2      0.0      if len(pbaseB1) > 0:
    26        13       5311.0    408.5      0.1          pbaseB1red = pbaseB1[np.logical_not(np.in1d(pbaseB1,Kexclude, assume_unique=True))]
    27                                               else:
    28                                                   pbaseB1red = []
    29        13         96.0      7.4      0.0      if len(pbaseB2) > 0:
    30         1        282.0    282.0      0.0          pbaseB2red = pbaseB2[np.logical_not(np.in1d(pbaseB2,Kexclude, assume_unique=True))]
    31                                               else:
    32        12         44.0      3.7      0.0          pbaseB2red = []
    33                                           
    34        13       1859.0    143.0      0.0      klist = np.sort(np.append(pbaseDDred[pbaseDDred > 0], dbaseDDred[dbaseDDred > 0]))
    35        13       3155.0    242.7      0.1      jlist = np.sort(-np.append(pbaseDDred[pbaseDDred < 0], dbaseDDred[dbaseDDred < 0]))
    36                                           
    37        13        154.0     11.8      0.0      lk = np.size(klist)
    38        13         87.0      6.7      0.0      lj = np.size(jlist)
    39                                           
    40                                               # The starting sequence
    41        13      75944.0   5841.8      1.3      new_bs = SCLP_base_sequence({'prim_name': pbaseDDred, 'dual_name': dbaseDDred,'A': DDred.copy()})
    42        13       6357.0    489.0      0.1      dx, dq = extract_rates(pbaseDDred, dbaseDDred, DDred, lk, lj, totalK, totalJ)
    43                                               #TODO: check if we need vstack
    44        13     393041.0  30233.9      7.0      solution = SCLP_solution(np.vstack(pbaseDDred), np.vstack(dbaseDDred), [], new_bs, dx, dq)
    45                                               # performing the left and right first pivots
    46                                               #		the right pivot:
    47        13        647.0     49.8      0.0      if np.size(pbaseB2red) > 0:
    48         1          8.0      8.0      0.0          if not isinstance(v1, list):
    49         1          7.0      7.0      0.0              if v1 > 0:
    50                                                           K_0 = [v1]
    51                                                           J_N = []
    52                                                       else:
    53         1          4.0      4.0      0.0                  K_0 = []
    54         1          5.0      5.0      0.0                  J_N = [-v1]
    55                                                   else:
    56                                                       K_0 = []
    57                                                       J_N = []
    58         1          5.0      5.0      0.0          if not isinstance(v2, list):
    59         1         13.0     13.0      0.0              if v2 < 0:
    60                                                           J_N.append(-v2)
    61         1         46.0     46.0      0.0          from .SCLP_pivot5 import SCLP_pivot
    62         1          5.0      5.0      0.0          solution, STEPCOUNT, ITERATION = SCLP_pivot(K_0,J_N,solution,0,1,[],v1, lk, lj, 1, totalK, totalJ,
    63         1      23012.0  23012.0      0.4                                                      DEPTH, STEPCOUNT, ITERATION, settings, tolerance)
    64                                               #		the left pivot:
    65        13        112.0      8.6      0.0      if np.size(pbaseB1red) > 0:
    66        13        113.0      8.7      0.0          if not isinstance(v2, list):
    67        13        137.0     10.5      0.0              if v2 > 0:
    68        13         58.0      4.5      0.0                  K_0 = [v2]
    69        13         58.0      4.5      0.0                  J_N = []
    70                                                       else:
    71                                                           K_0 = []
    72                                                           J_N = [-v2]
    73                                                   else:
    74                                                       K_0 = []
    75                                                       J_N = []
    76        13         68.0      5.2      0.0          if not isinstance(v1, list):
    77         1          6.0      6.0      0.0              if v1 > 0:
    78                                                           K_0.append(v1)
    79        13        641.0     49.3      0.0          from .SCLP_pivot5 import SCLP_pivot
    80        13         68.0      5.2      0.0          solution, STEPCOUNT, ITERATION = SCLP_pivot(K_0,J_N,solution,-1,0,v2,[], lk, lj, 1, totalK, totalJ,
    81        13    1110543.0  85426.4     19.7                                                      DEPTH, STEPCOUNT, ITERATION, settings, tolerance)
    82                                               # prepare the boundaries
    83        13         63.0      4.8      0.0      T = 1
    84        13         56.0      4.3      0.0      del_T = 0
    85                                           
    86        13        212.0     16.3      0.0      x_0=np.zeros((lk,1))
    87        13        148.0     11.4      0.0      q_N=np.zeros((lj,1))
    88        13        100.0      7.7      0.0      del_x_0=np.zeros((lk,1))
    89        13        145.0     11.2      0.0      del_q_N=np.zeros((lj,1))
    90                                           
    91                                               # Boundary values for one sided subproblem, collision at t=0
    92        13        150.0     11.5      0.0      if N1 == -1:
    93                                                   # The case of v1 > 0, collision case iv_a
    94                                                   if not isinstance(v1, list) and v1 > 0:
    95                                                       dx_DD_v1 = DD[1:,0][pbaseDD == v1][0]
    96                                                       lk1 = klist == v1
    97                                                       x_0[lk1] = -dx_DD_v1
    98                                                       del_x_0[lk1] = dx_DD_v1
    99                                                   # The case of v1 < 0, collision case iii_a
   100                                                   if not isinstance(v1, list) and v1 < 0:
   101                                                       #dq_B2_v1 = AA( 1, j1B2 + 1, N2 )
   102                                                       dq_B2_v1 = AAN2['A'][0,1:][AAN2['dual_name'] == v1][0]
   103                                                       lj1 = jlist == -v1
   104                                                       #q_N[lj1] = 0
   105                                                       del_q_N[lj1] = -dq_B2_v1
   106                                               #
   107                                               #
   108                                               # Boundary values for one sided subproblem, collision at t=T
   109        13         81.0      6.2      0.0      elif N2 == NN:
   110                                                   # The case of v2 > 0, collision case iii_b
   111        12        153.0     12.8      0.0          if not isinstance(v2, list) and v2 > 0:
   112                                                       #dx_B1_v2 = AA( i2B1 + 1, 1, N1 )
   113        12        608.0     50.7      0.0              dx_B1_v2 = AAN1['A'][1:,0][AAN1['prim_name'] == v2][0]
   114        12        141.0     11.8      0.0              lk2 = klist == v2
   115                                                       #x_0[lk2] = 0
   116        12        352.0     29.3      0.0              del_x_0[lk2] = -dx_B1_v2
   117                                                   # The case of v2 < 0, collision case iv_b
   118        12        103.0      8.6      0.0          if not isinstance(v2, list) and v2 < 0:
   119                                                       dq_DD_v2 = DD[0,1:][dbaseDD == v2][0]
   120                                                       lj2 = jlist == -v2
   121                                                       q_N[lj2] = -dq_DD_v2
   122                                                       del_q_N[lj2] = dq_DD_v2
   123                                               #
   124                                               #
   125                                               # Boundary values for two sided subproblem, collision at 0<t<T
   126                                               #  setting boundaries for the second exiting variable v1
   127                                               else:
   128         1         10.0     10.0      0.0          if not isinstance(v1, list) and v1 > 0:
   129                                                       dx_DD_v1 = DD[1:,0][pbaseDD == v1][0]
   130                                                       lk1 = klist == v1
   131                                                       x_0[lk1] = -dx_DD_v1
   132                                                       #dx_B1_v1 = AA( i1B1 + 1, 1, N1 )
   133                                                       dx_B1_v1 = AAN1['A'][1:,0][AAN1['prim_name'] == v1][0]
   134                                                       del_x_0[lk1] = -0.5*dx_B1_v1 + dx_DD_v1
   135         1          6.0      6.0      0.0          if not isinstance(v1, list) and v1 < 0:
   136                                                       #dq_B2_v1 = AA( 1, j1B2 + 1, N2 )
   137         1         38.0     38.0      0.0              dq_B2_v1 = AAN2['A'][0,1:][AAN2['dual_name'] == v1][0]
   138         1         14.0     14.0      0.0              lj1 = jlist == -v1
   139                                                       #q_N(j1) = 0
   140         1         22.0     22.0      0.0              del_q_N[lj1] = -0.5*dq_B2_v1
   141                                                   #  setting boundaries for the first exiting variable v2
   142         1         15.0     15.0      0.0          if not isinstance(v2, list) and v2 > 0:
   143                                                       #dx_B1_v2 = AA( i2B1 + 1, 1, N1 )
   144         1         29.0     29.0      0.0              dx_B1_v2 = AAN1['A'][1:,0][AAN1['prim_name'] == v2][0]
   145         1         10.0     10.0      0.0              lk2 = klist == v2
   146                                                       #x_0[lk2] = 0
   147         1         18.0     18.0      0.0              del_x_0[lk2] = -0.5*dx_B1_v2
   148         1         12.0     12.0      0.0          if not isinstance(v2, list) and v2 < 0:
   149                                                       dq_DD_v2 = DD[0,1:][dbaseDD == v2][0]
   150                                                       lj2 = jlist == -v2
   151                                                       q_N[lj2] = -dq_DD_v2
   152                                                       #dq_B2_v2 = AA(1, j2B2 + 1, N2 )
   153                                                       dq_B2_v2 = AAN2['A'][0,1:][AAN2['dual_name'] == v2][0]
   154                                                       del_q_N[lj2] = -0.5*dq_B2_v2 + dq_DD_v2
   155                                           
   156                                               #############################################
   157                                               # solving the subproblem
   158        13        769.0     59.2      0.0      from .SCLP_solver5 import SCLP_solver
   159        13         65.0      5.0      0.0      solution, x_0, q_N, T, STEPCOUNT = SCLP_solver(solution, x_0, del_x_0, q_N, del_q_N, T, del_T, 1,'sub_prob', pbaseB1red,
   160        13    1786922.0 137455.5     31.7                                                  pbaseB2red, klist, jlist, totalK, totalJ, DEPTH, STEPCOUNT, ITERATION, settings, tolerance)
   161                                               #############################################
   162                                               # the list of pivots:
   163                                               #[~, ~, pivots] = calc_pivots3(pn1, dn1)
   164        13        131.0     10.1      0.0      Npivots = len(solution.pivots)
   165                                               #Warning this based on assumption that first basis in new_base_sequence is equal to the AAN1 and/or last basis is equal to the AAN2
   166        13         59.0      4.5      0.0      if Npivots > 0:
   167        13        194.0     14.9      0.0          dx = sparse_matrix_constructor(None, None, KK)
   168        13        103.0      7.9      0.0          dq = sparse_matrix_constructor(None, None, JJ)
   169        13         91.0      7.0      0.0          if N1 != -1:
   170        13         65.0      5.0      0.0              pm1 = AAN1['prim_name']
   171        13         54.0      4.2      0.0              dm1 = AAN1['dual_name']
   172                                                       # pp1 = np.setdiff1d(pn1[:,0], pm1)
   173                                                       # pp2 = np.setdiff1d(dn1[:,0], dm1)
   174                                                       # if len(pp1) > 1 or len(pp2) > 1:
   175                                                       #     print('Incomplete pivot...')
   176                                                       #     raise Exception()
   177                                                       # elif len(pp1) == 0 and len(pp2) == 0:
   178                                                       #     pass
   179                                                       # elif len(pp1) == 1 and len(pp2) == 1:
   180                                                       #     if pivots[0][0] == pp2[0] and pivots[0][1] == pp1[0]:
   181                                                       #         pass
   182                                                       #     elif pivots[0][0] != pp2[0] and pivots[0][1] != pp1[0]:
   183                                                       #         piv = [[pp2[0],pp1[0]]]
   184                                                       #         pivots = piv + pivots
   185                                                       #     else:
   186                                                       #         print('Incompatible pivots...')
   187                                                       #         raise Exception()
   188                                                       # else:
   189                                                       #     print('Undefined pivot...')
   190                                                       #     raise Exception()
   191        13     424647.0  32665.2      7.5              DD1 = AAN1['A'].copy()
   192        13        296.0     22.8      0.0              k1 = len(pm1)
   193        13         74.0      5.7      0.0              l1 = len(dm1)
   194                                                       # if N2 != NN:
   195                                                       #     pp1 = np.setdiff1d(pn1[:, -1], AAN2['prim_name'])
   196                                                       #     pp2 = np.setdiff1d(dn1[:, -1], AAN2['dual_name'])
   197                                                       #     if len(pp1) > 1 or len(pp2) > 1:
   198                                                       #         print('Incomplete pivot...')
   199                                                       #         raise Exception()
   200                                                       #     elif len(pp1) == 0 and len(pp2) == 0:
   201                                                       #         pivots = pivots[:-1]
   202                                                       #         Npivots -= 1
   203                                                       #     elif len(pp1) == 1 and len(pp2) == 1:
   204                                                       #         pass
   205        13        631.0     48.5      0.0              zz1 = np.zeros(k1)
   206        13        197.0     15.2      0.0              zz2 = np.zeros(l1)
   207        13        238.0     18.3      0.0              if N2 != NN:
   208         1          5.0      5.0      0.0                  Npivots -=1
   209         1         30.0     30.0      0.0                  ran = enumerate(solution.pivots[:-1])
   210                                                       else:
   211        12        268.0     22.3      0.0                  ran = enumerate(solution.pivots)
   212        13        300.0     23.1      0.0              pn_new=np.empty(shape=(k1,Npivots), dtype=int)
   213        13        132.0     10.2      0.0              dn_new=np.empty(shape=(l1,Npivots), dtype=int)
   214                                           
   215        40        263.0      6.6      0.0              for i,piv1 in ran:
   216        27    1629821.0  60363.7     28.9                  DD1,pm1,dm1,zz1,zz2 = full_pivot(DD1,find(pm1==piv1[0])[0],find(dm1==piv1[1])[0],pm1.copy(),dm1.copy(),zz1.copy(),zz2.copy())
   217        27        669.0     24.8      0.0                  pn_new[:,i] = pm1
   218        27        535.0     19.8      0.0                  dn_new[:,i] = dm1
   219        27      15555.0    576.1      0.3                  ndx, ndq = extract_rates(pm1, dm1, DD1, KK, JJ, totalK, totalJ)
   220        27       1505.0     55.7      0.0                  dx.append(ndx)
   221        27        788.0     29.2      0.0                  dq.append(ndq)
   222                                                   else:
   223                                                       pm1 = AAN2['prim_name']
   224                                                       dm1 = AAN2['dual_name']
   225                                                       DD1 = AAN2['A'].copy()
   226                                                       k1 = len(pm1)
   227                                                       l1 = len(dm1)
   228                                                       pn_new = np.empty(shape=(k1, Npivots), dtype=int)
   229                                                       dn_new = np.empty(shape=(l1, Npivots), dtype=int)
   230                                                       zz1 = np.zeros(k1)
   231                                                       zz2 = np.zeros(l1)
   232                                                       for i,piv1 in enumerate(reversed(solution.pivots)):
   233                                                           [DD1,pm1,dm1,zz1,zz2] = full_pivot(DD1,find(pm1==piv1[1]),find(dm1==piv1[0]),pm1.copy(),dm1.copy(),zz1.copy(),zz2.copy())
   234                                                           pn_new[:, Npivots-i-1] = pm1
   235                                                           dn_new[:, Npivots-i-1] = dm1
   236                                                           ndx, ndq = extract_rates(pm1, dm1, DD1, KK, JJ, totalK, totalJ)
   237                                                           dx.prepend(ndx)
   238                                                           dq.prepend(ndq)
   239                                               else:
   240                                                   pn_new = np.vstack(np.union1d(solution.pn1[:,0], Kexclude))
   241                                                   dn_new = np.vstack(np.union1d(solution.dn1[:,0], -Jexclude))
   242        13        188.0     14.5      0.0      return  pn_new, dn_new, dx, dq, solution.pivots, STEPCOUNT, ITERATION

Total time: 0.0351685 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_boundaries.py
Function: calc_boundaries at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           ####'#@profile
     6                                           def calc_boundaries(G,F,H,b,d,alpha,gamma, tolerance = 0, solve_gen_LP = False):
     7         1         16.0     16.0      0.0      K, J = np.shape(G)
     8         1          7.0      7.0      0.0      L = np.shape(F)[1]
     9         1          5.0      5.0      0.0      I = np.shape(H)[0]
    10         1          4.0      4.0      0.0      if I == 0 & L == 0:
    11                                                   x_0 = alpha
    12                                                   q_N = np.vstack(-gamma)
    13                                                   if np.any(x_0 < 0):
    14                                                       raise Exception('***  Problem not primal feasible')
    15                                                   if np.any(q_N < 0):
    16                                                       raise Exception('***  Problem not dual feasible')
    17                                                   return x_0, q_N
    18         1          3.0      3.0      0.0      if solve_gen_LP:
    19                                                   DD0 = np.vstack((-np.hstack((0, gamma, np.zeros((1,L)))), np.hstack((alpha, G, F)), np.hstack((np.zeros((I,1)), H, np.zeros((I, L))))))
    20                                                   pn = np.vstack(np.hstack((np.arange(1,K+1), -np.arange(J + 1, J + I + 1))))
    21                                                   ps = np.zeros((K + I, 1), dtype = int)
    22                                                   dn = np.hstack((-np.arange(1,J+1), np.arange(K + 1, K + L + 1)))
    23                                                   ds = np.zeros((1, J + L), dtype = int)
    24                                                   DD0, pn, dn, ps, ds, err = simplex_procedures(DD0, pn, dn, ps, ds, tolerance)
    25                                                   if DD0[0, 0] != 0:
    26                                                       raise Exception('*** Problem requires impulse controls')
    27         1         10.0     10.0      0.0      if np.size(F) > 0:
    28                                                   DD1 = np.vstack((-np.hstack((0, d)), np.hstack((np.vstack(alpha), F))))
    29                                                   pn1 = np.vstack(np.arange(1,K+1))
    30                                                   ps1 = np.zeros((K, 1), dtype = int)
    31                                                   dn1 = np.arange(K + 1, K + L + 1)
    32                                                   ds1 = np.zeros((1, L), dtype = int)
    33                                                   DD1, pn1, dn1, ps1, ds1, err = simplex_procedures(DD1, pn1, dn1, ps1, ds1, tolerance)
    34                                                   x_0 = np.zeros((K + L, 1))
    35                                                   x_0[pn1] = DD1[-1, 0]
    36                                               else:
    37         1          2.0      2.0      0.0          x_0 = alpha
    38                                           
    39         1          4.0      4.0      0.0      if np.size(H) > 0:
    40         1      39416.0  39416.0     41.1          DD2 = np.vstack((np.hstack((0, np.hstack(b))), np.hstack((np.vstack(-gamma), -H.transpose()))))
    41         1      26081.0  26081.0     27.2          pn2 = np.vstack(np.arange(1,J+1))
    42         1         41.0     41.0      0.0          ps2 = np.zeros((J, 1), dtype = int)
    43         1         46.0     46.0      0.0          dn2 = np.arange(J + 1,J + I+1)
    44         1          9.0      9.0      0.0          ds2 = np.zeros((1, I), dtype = int)
    45         1      30103.0  30103.0     31.4          DD2, pn2, dn2, ps2, ds2, err = simplex_procedures(DD2, pn2, dn2, ps2, ds2, tolerance)
    46         1         87.0     87.0      0.1          q_N = np.zeros((J + I, 1))
    47         1        106.0    106.0      0.1          q_N[pn2] = DD2[-1, 0]
    48                                               else:
    49                                                   q_N = -gamma
    50                                           
    51         1          3.0      3.0      0.0      return x_0, q_N

Total time: 0.416145 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_controls5.py
Function: calc_controls at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           ####'#@profile
     5                                           def calc_controls(solution, JJ, KK):
     6                                           
     7         1        112.0    112.0      0.0      new_dict = solution.get_basis_at(0)
     8         1         27.0     27.0      0.0      u = sparse_matrix_constructor(None, None, JJ)
     9         1         13.0     13.0      0.0      p = sparse_matrix_constructor(None, None, KK)
    10                                           
    11       313        444.0      1.4      0.0      for place in range(solution.NN):
    12       312       8654.0     27.7      0.8          klist2 = find(new_dict['dual_name'] > 0)
    13       312       7835.0     25.1      0.7          jlist1 = find(new_dict['prim_name'] < 0)
    14       312       1209.0      3.9      0.1          kn2 =  new_dict['dual_name'][klist2]
    15       312       2164.0      6.9      0.2          jn1 = -new_dict['prim_name'][jlist1]
    16       312      32525.0    104.2      2.9          u.append(sparse_matrix_constructor(new_dict['A'][jlist1+1,0], jn1-1, JJ))
    17       312      16981.0     54.4      1.5          p.append(sparse_matrix_constructor(new_dict['A'][0,klist2+1], kn2-1, KK))
    18       312       1842.0      5.9      0.2          if place < solution.NN - 1:
    19       311    1049979.0   3376.1     92.5              new_dict = solution.get_basis_at(place)
    20         1      13498.0  13498.0      1.2      return u.get_matrix(), p.get_matrix()

Total time: 0 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_dict.py
Function: calc_dict at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           ####'#@profile
     6                                           def calc_dict(base_sequence, N1, N2, pivots):
     7                                               NN = len(pivots)
     8                                               if N1 >= 0:
     9                                                   test1 = np.fabs(np.asarray(base_sequence['places']) - N1)
    10                                                   ind1 = np.argmin(test1)
    11                                                   if N2 <= NN:
    12                                                       test2 = np.fabs(np.asarray(base_sequence['places']) - N2)
    13                                                       ind2 = np.argmin(test2)
    14                                                       if test1[ind1] < test2[ind2]:
    15                                                           return get_new_dict(base_sequence['bases'][ind2], base_sequence['places'][ind2], N2, pivots), N2
    16                                                       else:
    17                                                           return get_new_dict(base_sequence['bases'][ind1], base_sequence['places'][ind1], N1, pivots), N1
    18                                                   else:
    19                                                       return get_new_dict(base_sequence['bases'][ind1], base_sequence['places'][ind1], N1, pivots), N1
    20                                               else:
    21                                                   test2 = np.fabs(np.array(base_sequence['places']) - N2)
    22                                                   ind2 = np.argmin(test2)
    23                                                   return get_new_dict(base_sequence['bases'][ind2], base_sequence['places'][ind2], N2, pivots), N2

Total time: 2.67546 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_equations.py
Function: calc_equations at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           ####'#@profile
     6                                           def calc_equations(klist,jlist,pivots,x_0,del_x_0,q_N,del_q_N,T,del_T,dx,dq):
     7       621       4667.0      7.5      0.1      NN = len(pivots)+1
     8       621      38062.0     61.3      0.5      coeff = np.zeros((NN,NN))
     9       621       8882.0     14.3      0.1      rhs = np.zeros(NN)
    10       621       3478.0      5.6      0.0      drhs = np.zeros(NN)
    11    108852     142108.0      1.3      1.9      for n in range(NN-1):
    12    108231     205132.0      1.9      2.8          vv = pivots[n][0]
    13    108231     143716.0      1.3      2.0          if vv > 0:
    14    105721     129024.0      1.2      1.8              try:
    15    105721    1346746.0     12.7     18.5                  k = find(klist == vv)[0]
    16                                                       except:
    17                                                           print(vv)
    18    105721     504299.0      4.8      6.9              coeff[n,0:n+1] = dx[k, 0:n+1]
    19    105721     397909.0      3.8      5.5              rhs[n] = -x_0[k]
    20    105721     356020.0      3.4      4.9              drhs[n] = -del_x_0[k]
    21                                                   else:
    22      2510      35476.0     14.1      0.5              j = find(jlist == -vv)[0]
    23      2510      13335.0      5.3      0.2              coeff[n,n+1:] = dq[j, n+1:]
    24      2510       9985.0      4.0      0.1              rhs[n] = -q_N[j]
    25      2510       9156.0      3.6      0.1              drhs[n] = -del_q_N[j]
    26       621      24530.0     39.5      0.3      coeff[NN-1,:] = np.ones(NN)
    27       621       1554.0      2.5      0.0      rhs[NN-1] = T
    28       621       1890.0      3.0      0.0      drhs[NN-1] = del_T
    29       621    3916903.0   6307.4     53.7      sol = np.linalg.solve(coeff, np.hstack((np.vstack(rhs),np.vstack(drhs))))
    30                                               # tau =clean(sol(:,1));%
    31                                               # dtau=clean(sol(:,2));%
    32       621       6028.0      9.7      0.1      return sol[:,0], sol[:,1]

Total time: 11.3013 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_statecollide5.py
Function: calc_statecollide at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           ####'#@profile
     5                                           def calc_statecollide(klist, jlist, x, del_x, q, del_q, sdx, sdq, tolerance):
     6                                           # Calculates time and variable for which state shrinks to zero, and performs testing
     7                                           # problem   result = 0  Ok
     8                                           #           result = 1  immediate collision         data = TODO
     9                                           #           result = 2  multiple states hit zero    data = TODO
    10       607       3207.0      5.3      0.0      problem = {'result': 0, 'data': []}
    11                                           
    12       607       3580.0      5.9      0.0      KK = len(klist)
    13       607       2469.0      4.1      0.0      JJ = len(jlist)
    14                                               #TODO: paralellize
    15       607    1971792.0   3248.4      6.4      w_x = get_where(del_x, True, sdx, KK)
    16       607    9019075.0  14858.4     29.3      rz_x, bb_x, kk_x, nn_x = calc_rz_bb(KK, x, del_x, w_x)
    17                                               ###
    18       607    1947432.0   3208.3      6.3      w_q = get_where(del_q, False, sdq, JJ)
    19       607   10018705.0  16505.3     32.5      rz_q, bb_q, kk_q, nn_q = calc_rz_bb(JJ, q, del_q, w_q)
    20                                               #end
    21       607       6812.0     11.2      0.0      if bb_x > bb_q:
    22       587       5763.0      9.8      0.0          if bb_x == 0:
    23                                                       print(kk_x, nn_x)
    24                                                       return [np.inf, 0, 0], problem
    25                                                   else:
    26       587       3641.0      6.2      0.0              test1 = 1. / bb_x
    27       587       3689.0      6.3      0.0              if test1 <= -tolerance:
    28                                                           return [], problem
    29       587       5573.0      9.5      0.0              elif abs(test1) < tolerance:
    30                                                           print('immediate collision\n')
    31                                                           problem['result'] = 1
    32                                                           return [], problem
    33                                                       else:                    # test1 >= tolerance
    34       587       4122.0      7.0      0.0                  nn = nn_x - 1
    35       587       3413.0      5.8      0.0                  vv = klist[kk_x]
    36       587       1780.0      3.0      0.0                  bb = bb_x
    37                                               else:
    38        20        137.0      6.8      0.0          if bb_q == 0:
    39                                                       print(kk_q, nn_q)
    40                                                       return [np.inf, 0, 0], problem
    41                                                   else:
    42        20        100.0      5.0      0.0              test1 = 1. / bb_q
    43        20         87.0      4.3      0.0              if test1 <= -tolerance:
    44                                                           return [], problem
    45        20        145.0      7.2      0.0              elif abs(test1) < tolerance:
    46                                                           print('immediate collision\n')
    47                                                           problem['result'] = 1
    48                                                           return [], problem
    49                                                       else:                   # test1 >= tolerance
    50        20        111.0      5.5      0.0                  nn = nn_q - 1
    51        20        104.0      5.2      0.0                  vv = -jlist[kk_q]
    52        20         54.0      2.7      0.0                  bb = bb_q
    53                                               # TODO: paralellize
    54       607     703237.0   1158.5      2.3      test2 = np.add(np.divide(rz_x, bb, where=w_x), -1.0, where=w_x)
    55       607    2594663.0   4274.6      8.4      zstates = np.less(np.fabs(test2, where=w_x), tolerance, where = w_x, out=np.full_like(test2, False))
    56       607     578500.0    953.0      1.9      sz_x = np.sum(zstates)
    57                                               ###
    58       607     314734.0    518.5      1.0      test2 = np.add(np.divide(rz_q, bb, where=w_q), -1.0, where=w_q)
    59       607    2930195.0   4827.3      9.5      zstates = np.less(np.fabs(test2, where=w_q), tolerance, where = w_q, out=np.full_like(test2, False))
    60       607     695184.0   1145.3      2.3      sz_q = np.sum(zstates)
    61                                               #end
    62       607       9907.0     16.3      0.0      if sz_x + sz_q > 1:
    63                                                   print('multiple states hit zero\n')
    64                                                   problem['result'] = 2
    65                                                   return [], problem
    66                                               else:
    67       607       2905.0      4.8      0.0          return [test1, nn, vv], problem

Total time: 20.6678 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_states4.py
Function: calc_states at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           ####'#@profile
     6                                           def calc_states(dx,dq,x_0,del_x_0,q_N,del_q_N,tau,dtau,sdx, sdq, tolerance):
     7       621       1969.0      3.2      0.0      K1, N1  = dx.shape
     8       621       1188.0      1.9      0.0      if K1 == 0:
     9                                                   x = np.zeros((0, N1 + 1))
    10                                                   del_x = np.zeros((0, N1 + 1))
    11                                               else:
    12                                                   # x = Array('d',K1 * (N1 + 1))
    13                                                   # del_x = Array('d',K1 * (N1 + 1))
    14                                                   # K1 = Value('d', K1)
    15                                                   # x_0 = Array('d', x_0)
    16                                                   # p = Process(target=calc_prim_states, args=())
    17       621      33337.0     53.7      0.1          x = np.zeros((K1, N1 + 1))
    18       621      25751.0     41.5      0.0          del_x = np.zeros((K1, N1 + 1))
    19                                           
    20       621       1785.0      2.9      0.0      J1 = dq.shape[0]
    21       621       1079.0      1.7      0.0      if J1 == 0:
    22                                                   q = np.zeros((0,N1+1))
    23                                                   del_q = np.zeros((0,N1+1))
    24                                               else:
    25       621      24214.0     39.0      0.0          q = np.zeros((J1, N1 + 1))
    26       621      24512.0     39.5      0.0          del_q = np.zeros((J1, N1 + 1))
    27                                               # TODO: parallelize
    28       621   25894472.0  41698.0     45.9      _calc_states(x, del_x, K1, x_0, del_x_0, tau, dtau, dx, sdx, tolerance, True)
    29       621   30371558.0  48907.5     53.9      _calc_states(q, del_q, J1, q_N, del_q_N, tau, dtau, dq, sdq, tolerance, False)
    30       621       3782.0      6.1      0.0      return x, del_x, q, del_q

Total time: 20.6052 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_states4.py
Function: _calc_states at line 33

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    33                                           ####'#@profile
    34                                           def _calc_states(state, del_state, vdim, state0, del_state0, tau, dtau, dstate, sdstate, tolerance, is_primal):
    35      1242       2691.0      2.2      0.0      if vdim > 0:
    36      1242     880530.0    709.0      1.6          sdstate = sdstate == 0
    37      1242     934658.0    752.5      1.7          sdstate = np.logical_or(np.hstack((np.full((vdim, 1), False), sdstate)), np.hstack((sdstate, np.full((vdim, 1), False))))
    38      1242       3370.0      2.7      0.0          if is_primal:
    39                                                       #TODO: parallelize
    40       621   12263525.0  19748.0     21.8              _calc_primal(state, dstate, tau, state0, sdstate, tolerance)
    41       621   12751794.0  20534.3     22.7              _calc_primal(del_state, dstate, dtau, del_state0, sdstate, tolerance)
    42                                                   else:
    43                                                       # TODO: parallelize
    44       621   14651568.0  23593.5     26.1              _calc_dual(state, dstate, tau, state0, sdstate, tolerance)
    45       621   14724916.0  23711.6     26.2              _calc_dual(del_state, dstate, dtau, del_state0, sdstate, tolerance)

Total time: 9.14348 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_states4.py
Function: _calc_primal at line 47

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    47                                           ####'#@profile
    48                                           def _calc_primal(state, dstate, tau, state0, sd, tolerance):
    49      1242   19578282.0  15763.5     78.5      state[:, :] = np.cumsum(np.hstack((state0, dstate * np.hstack(tau[:, None]))), 1)
    50      1242    5366011.0   4320.5     21.5      state[np.logical_or(np.absolute(state) < tolerance, sd)] = 0

Total time: 10.7415 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_states4.py
Function: _calc_dual at line 53

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    53                                           ####'#@profile
    54                                           def _calc_dual(state, dstate, tau, state0, sd, tolerance):
    55      1242   23416180.0  18853.6     79.9      state[:, :] = np.fliplr(np.cumsum(np.fliplr(np.hstack((dstate * np.hstack(tau[:, None]), state0))), 1))
    56      1242    5887528.0   4740.4     20.1      state[np.logical_or(np.absolute(state) < tolerance, sd)] = 0

Total time: 0 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\extract_rates.py
Function: extract_rates at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           ####'#@profile
     7                                           def extract_rates(prim_name, dual_name, dct, KK, JJ, totalK = None, totalJ = None):
     8                                               if totalK is None:
     9                                                   totalK = KK
    10                                               if totalJ is None:
    11                                                   totalJ = JJ
    12                                               klist1 = find(prim_name > 0)
    13                                               jlist2 = find(dual_name < 0)
    14                                               kn1 =  prim_name[klist1]
    15                                               jn2 = -dual_name[jlist2]
    16                                               if KK < totalK:
    17                                                   kn2 =  dual_name[dual_name > 0]
    18                                                   kord = np.argsort(np.argsort(np.hstack((kn1, kn2))))[:len(kn1)]
    19                                                   dx = coo_matrix((dct[klist1+1,0], (kord, np.zeros(len(kord)))), shape=(KK, 1))
    20                                               else:
    21                                                   dx = coo_matrix((dct[klist1+1,0], (kn1-1, np.zeros(len(kn1)))), shape=(KK, 1))
    22                                               if JJ < totalJ:
    23                                                   jn1 = -prim_name[prim_name < 0]
    24                                                   jord = np.argsort(np.argsort(np.hstack((jn1, jn2))))[len(jn1):]
    25                                                   dq = coo_matrix((dct[0,jlist2+1],(jord,np.zeros(len(jord)))),shape=(JJ,1))
    26                                               else:
    27                                                   dq = coo_matrix((dct[0,jlist2+1],(jn2-1,np.zeros(len(jn2)))),shape=(JJ,1))
    28                                               return dx, dq

Total time: 0.102843 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\extract_rates5.py
Function: extract_rates at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           ####'#@profile
     7                                           def extract_rates(prim_name, dual_name, dct, KK, JJ, totalK = None, totalJ = None):
     8       641       1387.0      2.2      0.5      if totalK is None:
     9         1          2.0      2.0      0.0          totalK = KK
    10       641       1136.0      1.8      0.4      if totalJ is None:
    11         1          2.0      2.0      0.0          totalJ = JJ
    12       641      28384.0     44.3     10.1      klist1 = find(prim_name > 0)
    13       641      23378.0     36.5      8.3      jlist2 = find(dual_name < 0)
    14       641       8697.0     13.6      3.1      kn1 =  prim_name[klist1]
    15       641      18279.0     28.5      6.5      jn2 = -dual_name[jlist2]
    16       641       1519.0      2.4      0.5      if KK < totalK:
    17        41       1104.0     26.9      0.4          kn2 =  dual_name[dual_name > 0]
    18        41       6178.0    150.7      2.2          kord = np.argsort(np.argsort(np.hstack((kn1, kn2))))[:len(kn1)]
    19        41       2104.0     51.3      0.7          dx = sparse_matrix_constructor(dct[klist1+1,0], kord, KK)
    20                                               else:
    21       600     143043.0    238.4     51.0          dx = sparse_matrix_constructor(dct[klist1+1,0], kn1-1, KK)
    22       641       1923.0      3.0      0.7      if JJ < totalJ:
    23         4         55.0     13.8      0.0          jn1 = -prim_name[prim_name < 0]
    24         4        601.0    150.2      0.2          jord = np.argsort(np.argsort(np.hstack((jn1, jn2))))[len(jn1):]
    25         4         96.0     24.0      0.0          dq = sparse_matrix_constructor(dct[0,jlist2+1], jord, JJ)
    26                                               else:
    27       637      41345.0     64.9     14.7          dq = sparse_matrix_constructor(dct[0,jlist2+1], jn2-1, JJ)
    28       641       1333.0      2.1      0.5      return dx, dq

Total time: 21.2537 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\get_new_dict.py
Function: get_new_dict at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           ####'#@profile
     6                                           def get_new_dict(oldDict, oldPlace, newPlace, pivots):
     7       610       2268.0      3.7      0.0      L = len(pivots)
     8       610       3272.0      5.4      0.0      if isinstance(oldPlace, list):
     9                                                   oldPlace = oldPlace[0]
    10                                                   oldDict = oldDict[0]
    11       610       2976.0      4.9      0.0      assert(newPlace >=0 and newPlace < L, 'new dictionary place is out of a base sequence')
    12       610       1996.0      3.3      0.0      assert(oldPlace >=0 and oldPlace < L, 'old dictionary place is out of a base sequence')
    13       610   20270616.0  33230.5     35.0      newDict={'A':oldDict['A'].copy(), 'prim_name':oldDict['prim_name'].copy(), 'dual_name':oldDict['dual_name'].copy()}
    14       610       9424.0     15.4      0.0      if oldPlace < newPlace:
    15      1183      14078.0     11.9      0.0          for i in range(oldPlace,newPlace):
    16       594      50688.0     85.3      0.1              out_v = find(newDict['prim_name'] == pivots[i][0])
    17       594      15049.0     25.3      0.0              in_v = find(newDict['dual_name'] == pivots[i][1])
    18       594   37010155.0  62306.7     63.8              newDict = dict_pivot(newDict, out_v, in_v)
    19       610       4573.0      7.5      0.0      if newPlace < oldPlace:
    20        42        593.0     14.1      0.0          for i in range(oldPlace-1, newPlace-1, -1):
    21        21       1293.0     61.6      0.0              out_v = find(newDict['prim_name'] == pivots[i][1])
    22        21        472.0     22.5      0.0              in_v = find(newDict['dual_name'] == pivots[i][0])
    23        21     593362.0  28255.3      1.0              newDict = dict_pivot(newDict, out_v, in_v)
    24       610       1364.0      2.2      0.0      return newDict

Total time: 0 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\pivot.py
Function: base_pivot at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           ####'#@profile
     5                                           def base_pivot(A, i, j):
     6                                               i = i + 1
     7                                               j = j + 1
     8                                               p = A[i, j]
     9                                               if p == 0:
    10                                                   raise Exception('pivot on zero')
    11                                               rp = (A[i,:] / p).copy()
    12                                               c = A[:, j].copy()
    13                                               A -= np.outer(c,rp)
    14                                               A[i,:] = rp
    15                                               A[:, j] = c / -p
    16                                               A[i, j] = 1. / p
    17                                               return A

Total time: 31.6766 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\pivot.py
Function: full_pivot at line 20

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    20                                           ####'#@profile
    21                                           def full_pivot(A, i, j, pn, dn, ps, ds):
    22      1485       5252.0      3.5      0.0      nam = pn[i]
    23      1485       6070.0      4.1      0.0      pn[i] = dn[j]
    24      1485       3312.0      2.2      0.0      dn[j] = nam
    25      1485       3156.0      2.1      0.0      sam = ps[i]
    26      1485       6323.0      4.3      0.0      ps[i] = - ds[j]
    27      1485       3617.0      2.4      0.0      ds[j] = - sam
    28      1485       5559.0      3.7      0.0      i = i + 1
    29      1485       3374.0      2.3      0.0      j = j + 1
    30      1485       4487.0      3.0      0.0      p = A[i, j]
    31      1485       4229.0      2.8      0.0      if p == 0:
    32                                                   raise Exception('pivot on zero')
    33      1485      67418.0     45.4      0.1      rp = (A[i,:] / p).copy()
    34      1485     141260.0     95.1      0.2      c = A[:, j].copy()
    35      1485   85521408.0  57590.2     99.0      A -= np.outer(c, rp)
    36                                               #A -= np.dot(np.reshape(c,(np.size(c),1)), np.reshape(rp, (1, np.size(rp))))
    37      1485     106282.0     71.6      0.1      A[i,:] = rp
    38      1485     515057.0    346.8      0.6      A[:, j] = c / -p
    39      1485      13784.0      9.3      0.0      A[i, j] = 1. / p
    40      1485       6273.0      4.2      0.0      return A, pn, dn, ps, ds

Total time: 13.7561 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\pivot.py
Function: dict_pivot at line 43

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    43                                           ####'#@profile
    44                                           def dict_pivot(dct, i, j):
    45       615       5072.0      8.2      0.0      nam = dct['prim_name'][i]
    46       615       5458.0      8.9      0.0      dct['prim_name'][i] = dct['dual_name'][j]
    47       615       1495.0      2.4      0.0      dct['dual_name'][j] = nam
    48       615      12103.0     19.7      0.0      i = i + 1
    49       615       4222.0      6.9      0.0      j = j + 1
    50       615      20957.0     34.1      0.1      p = dct['A'][i, j]
    51       615       7923.0     12.9      0.0      if p == 0:
    52                                                   raise Exception('pivot on zero')
    53       615      46140.0     75.0      0.1      rp = (dct['A'][i, :] / p).copy()
    54       615     135173.0    219.8      0.4      c = dct['A'][:, j].copy()
    55       615   36970564.0  60114.7     98.5      dct['A'] -= np.outer(c, rp)
    56                                               #dct['A'] -= np.dot(np.reshape(c,(np.size(c),1)), np.reshape(rp, (1, np.size(rp))))
    57       615      71421.0    116.1      0.2      dct['A'][i, :] = rp
    58       615     217380.0    353.5      0.6      dct['A'][:, j] = c / -p
    59       615      28248.0     45.9      0.1      dct['A'][i, j] = 1. / p
    60       615       1844.0      3.0      0.0      return dct

Total time: 31.5296 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\simplex_procedures.py
Function: simplex_procedures at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           ####'#@profile
     7                                           def simplex_procedures(A,pn,dn,ps,ds, tolerance = 0):
     8                                           
     9       615       6546.0     10.6      0.0      err = dict()
    10       615       3224.0      5.2      0.0      err['result'] = 0
    11       615       3952.0      6.4      0.0      mm = A.shape[0]
    12       615       2358.0      3.8      0.0      nn = A.shape[1]
    13                                           
    14       615      40795.0     66.3      0.0      pneg = find(ps == -1)
    15       616       3548.0      5.8      0.0      while pneg.size > 0:
    16         1          5.0      5.0      0.0          i = pneg[0]
    17         1          3.0      3.0      0.0          if tolerance == 0:
    18                                                       cond = A[i + 1, 1:] != 0
    19                                                   else:
    20         1         31.0     31.0      0.0              cond = np.absolute(A[i + 1, 1:]) > tolerance
    21         1         17.0     17.0      0.0          jj = find(np.logical_and(ds == -1, cond))
    22         1          3.0      3.0      0.0          if jj.size > 0:
    23                                                       j = jj[0]
    24                                                   else:
    25         1         16.0     16.0      0.0              mat = A[i + 1, 1:] / A[0, 1:]
    26         1          8.0      8.0      0.0              if A[i + 1, 0] > 0:
    27         1         52.0     52.0      0.0                  j = np.argmax(mat * (ds != 1))
    28         1          4.0      4.0      0.0                  m = mat[j]
    29                                                       else:
    30                                                           j = np.argmin(mat * (ds != 1))
    31                                                           m = -mat[j]
    32         1          4.0      4.0      0.0              if m <=0:
    33                                                           jj = find(A[i + 1, 1:])
    34                                                           if jj.size > 0:
    35                                                               j = jj[0]
    36                                                           else:
    37                                                               raise Exception('*** No pivot available')
    38         1       1480.0   1480.0      0.0          A, pn, dn, ps, ds = full_pivot(A, i, j, pn, dn, ps, ds)
    39         1         19.0     19.0      0.0          pneg = find(ps == -1)
    40                                           
    41       615      12926.0     21.0      0.0      dneg = find(ds == -1)
    42       897       4929.0      5.5      0.0      while dneg.size > 0:
    43       282       2316.0      8.2      0.0          j = dneg[0]
    44       282       1423.0      5.0      0.0          if tolerance == 0:
    45                                                       cond = A[1:, j + 1] != 0
    46                                                   else:
    47       282      60961.0    216.2      0.1              cond = np.absolute(A[1:, j + 1]) > tolerance
    48       282       8614.0     30.5      0.0          ii = find(np.logical_and(ps == -1, cond))
    49       282       1200.0      4.3      0.0          if ii.size > 0:
    50                                                       i = ii[0]
    51                                                   else:
    52       282      57306.0    203.2      0.1              mat = -A[1:, j + 1] / A[1:, 0]
    53       282       3652.0     13.0      0.0              if A[0, j + 1] < 0:
    54                                                           i = np.argmax(mat * (ps != 1))
    55                                                           m = mat[i]
    56                                                       else:
    57       282      24553.0     87.1      0.0                  i = np.argmin(mat * (ps != 1))
    58       282       1845.0      6.5      0.0                  m = -mat[i]
    59       282       1464.0      5.2      0.0              if m <=0:
    60                                                           ii = find(A[1:, j+1])
    61                                                           if ii.size > 0:
    62                                                               i = ii[0]
    63                                                           else:
    64                                                               raise Exception('*** No pivot available')
    65       282   16421196.0  58231.2     19.1          A, pn, dn, ps, ds = full_pivot(A, i, j, pn, dn, ps, ds)
    66       282      21011.0     74.5      0.0          dneg = find(ds == -1)
    67                                           
    68       615     157364.0    255.9      0.2      ptest = find(np.logical_and(ps == 0,  A[1:, 0] < 0))
    69       615      27598.0     44.9      0.0      dtest = find(np.logical_and(ds == 0,  A[0, 1:] < 0))
    70                                           
    71       615       2817.0      4.6      0.0      if ptest.size > 0 and dtest.size == 0:
    72       704       4751.0      6.7      0.0          while ptest.size > 0:
    73       398       2369.0      6.0      0.0              i = ptest[0]
    74       398      72283.0    181.6      0.1              mat = np.divide(-A[i + 1, 1:], A[0, 1:], out=np.zeros_like(A[i + 1, 1:]), where=np.logical_and(A[0, 1:]!=0, ds != 1))
    75       398      16844.0     42.3      0.0              j = np.argmax(mat)
    76                                                       #j = np.argmax(mat * (ds != 1))
    77       398       4107.0     10.3      0.0              if mat[j] <= 0:
    78                                                           A[0, 0] = -np.inf
    79                                                           err['result'] = 1
    80                                                           err['message'] = '***  problem is primal infeasible'
    81                                                           return A, pn, dn, ps, ds, err
    82       398   23737802.0  59642.7     27.6              A, pn, dn, ps, ds = full_pivot(A, i, j, pn, dn, ps, ds)
    83       398      99526.0    250.1      0.1              ptest = find(np.logical_and(ps == 0, A[1:, 0] < 0))
    84       309       1445.0      4.7      0.0      elif ptest.size == 0 and dtest.size > 0:
    85      1084       7823.0      7.2      0.0          while dtest.size > 0:
    86       777       4579.0      5.9      0.0              j = dtest[0]
    87       777     239321.0    308.0      0.3              mat = np.divide(A[1:, j + 1], A[1:, 0], out=np.zeros_like(A[1:, j + 1]), where=np.logical_and(A[1:, 0] != 0, ps != 1))
    88       777      37846.0     48.7      0.0              i = np.argmax(mat)
    89                                                       #i = np.argmax(mat * (ps != 1))
    90       777       8224.0     10.6      0.0              if mat[i] <= 0:
    91                                                           A[0, 0] = np.inf
    92                                                           err['result'] = 2
    93                                                           err['message'] = '***  problem is dual infeasible'
    94                                                           return A, pn, dn, ps, ds, err
    95       777   44799214.0  57656.6     52.1              A, pn, dn, ps, ds = full_pivot(A, i, j, pn, dn, ps, ds)
    96       777     103459.0    133.2      0.1              dtest = find(np.logical_and(ds == 0, A[0, 1:] < 0))
    97         2          6.0      3.0      0.0      elif ptest.size > 0 and dtest.size > 0:
    98                                                   B = np.zeros((mm+1,nn+1))
    99                                                   B[:-1,nn:nn+1] = np.random.rand(mm, 1) + 1
   100                                                   B[mm:mm+1,:-1] = np.random.rand(1, nn) + 1
   101                                                   B[:-1, :-1] = A
   102                                                   mat = np.divide(-A[0, 1:], B[mm, 1:-1], out=np.zeros_like(A[0, 1:]), where=np.logical_and(B[mm, 1:-1] > 0, ds != 1) )
   103                                                   j = np.argmax(mat)
   104                                                   mu1 = mat[j]
   105                                                   mat = np.divide(-A[1:, 0], B[1:-1, nn], out=np.zeros_like(A[1:, 0]), where=np.logical_and(B[1:-1, nn] >0, ps != 1) )
   106                                                   i = np.argmax(mat)
   107                                                   mu2 = mat[i]
   108                                                   mu = max(mu1,mu2)
   109                                                   while mu > 0:
   110                                                       if mu1 > mu2:
   111                                                           mat = np.divide(B[1:-1, j+1], B[1:-1, 0] + mu * B[1:-1, nn], out=np.zeros_like(B[1:-1, j+1]), where= ps != 1)
   112                                                           i = np.argmax(mat)
   113                                                           if mat[i] <= 0:
   114                                                               B[0, 0] = np.inf
   115                                                               err['result'] = 2
   116                                                               err['message'] = '***  problem is dual infeasible'
   117                                                               return B[:-1,:-1], pn, dn, ps, ds, err
   118                                                       else:
   119                                                           mat = np.divide(-B[i + 1, 1:-1], B[0, 1:-1] + mu * B[mm, 1:-1], out=np.zeros_like(B[i + 1, 1:-1]), where= ds !=1)
   120                                                           j = np.argmax(mat)
   121                                                           if mat[j] <= 0:
   122                                                               B[0, 0] = - np.inf
   123                                                               err['result'] = 1
   124                                                               err['message'] = '***  problem is primal infeasible'
   125                                                               return B[:-1, :-1], pn, dn, ps, ds, err
   126                                                       B, pn, dn, ps, ds = full_pivot(B, i, j, pn, dn, ps, ds)
   127                                                       mat = np.divide(-B[0, 1:-1], B[mm, 1:-1], out=np.zeros_like(B[0, 1:-1]), where=np.logical_and(B[mm, 1:-1] > 0, ds != 1))
   128                                                       j = np.argmax(mat)
   129                                                       mu1 = mat[j]
   130                                                       mat = np.divide(-B[1:-1, 0], B[1:-1, nn], out=np.zeros_like(B[1:-1, 0]), where=np.logical_and(B[1:-1, nn] > 0, ps != 1))
   131                                                       i = np.argmax(mat)
   132                                                       mu2 = mat[i]
   133                                                       mu = max(mu1, mu2)
   134                                                   A = B[:-1, :-1]
   135       615       3002.0      4.9      0.0      return A, pn, dn, ps, ds, err

Total time: 0 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\sparse_matrix_constructor.py
Function: insert at line 28

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    28                                               ####'#@profile
    29                                               def insert(self, after, data, indexes):
    30                                                   if after == -1:
    31                                                       self._data = data + self._data
    32                                                       self._indexes = indexes + self._indexes
    33                                                   elif after >= len(self._data) -1:
    34                                                       self._data = self._data + data
    35                                                       self._indexes = self._indexes + indexes
    36                                                   else:
    37                                                       self._data = self._data[:after + 1] + data + self._data[after + 1:]
    38                                                       self._indexes = self._indexes[:after + 1] + indexes + self._indexes[after + 1:]

Total time: 0.00034273 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\sparse_matrix_constructor.py
Function: remove at line 40

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    40                                               ####'#@profile
    41                                               def remove(self, from_, to_):
    42        14         45.0      3.2      4.8          if from_ <= 0:
    43                                                       self._data = self._data[to_:]
    44                                                       self._indexes = self._indexes[to_:]
    45        14         76.0      5.4      8.1          elif to_ >= len(self._data) -1:
    46                                                       self._data = self._data[:from_]
    47                                                       self._indexes = self._indexes[:from_]
    48                                                   else:
    49        14        448.0     32.0     47.9              self._data = self._data[:from_] + self._data[to_:]
    50        14        366.0     26.1     39.1              self._indexes = self._indexes[:from_] + self._indexes[to_:]

Total time: 0.0177582 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\sparse_matrix_constructor.py
Function: replace at line 52

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    52                                               ####'#@profile
    53                                               def replace(self, from_, to_, data, indexes):
    54      1226       3717.0      3.0      7.7          if from_ <= 0:
    55        54        183.0      3.4      0.4              self._data = data + self._data[to_:]
    56        54        151.0      2.8      0.3              self._indexes = indexes + self._indexes[to_:]
    57      1172       4531.0      3.9      9.4          elif to_ >= len(self._data) - 1:
    58       614       9554.0     15.6     19.7              self._data = self._data[:from_] + data
    59       614       7494.0     12.2     15.5              self._indexes = self._indexes[:from_] + indexes
    60                                                   else:
    61       558      13229.0     23.7     27.3              self._data = self._data[:from_] + data + self._data[to_:]
    62       558       9587.0     17.2     19.8              self._indexes = self._indexes[:from_] + indexes + self._indexes[to_:]

Total time: 0.00466039 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\sparse_matrix_constructor.py
Function: get_sub_matrix at line 64

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    64                                               ####'#@profile
    65                                               def get_sub_matrix(self, from_, to_):
    66       556       1488.0      2.7     11.7          if from_ <= 0:
    67                                                       return sparse_matrix_constructor(self._data[:to_].copy(), self._indexes[:to_].copy(), self._row_num)
    68       556       2602.0      4.7     20.5          elif to_ >= len(self._data) - 1:
    69                                                       return sparse_matrix_constructor(self._data[from_:].copy(), self._indexes[from_].copy(), self._row_num)
    70                                                   else:
    71       556       8624.0     15.5     67.8              return sparse_matrix_constructor(self._data[from_:to_].copy(), self._indexes[from_:to_].copy(), self._row_num)

Total time: 0 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\sparse_matrix_constructor.py
Function: insert_matrix at line 73

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    73                                               ####'#@profile
    74                                               def insert_matrix(self, after, other):
    75                                                   if isinstance(other, sparse_matrix_constructor):
    76                                                       if other.row_num != self._row_num:
    77                                                           raise ValueError('Row numbers must be equal!')
    78                                                       self.insert(after, other.data, other.indexes)

Total time: 0.00440271 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\sparse_matrix_constructor.py
Function: append at line 80

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    80                                               ####'#@profile
    81                                               def append(self, other):
    82       678       1997.0      2.9     16.6          if isinstance(other, sparse_matrix_constructor):
    83       678       2240.0      3.3     18.6              if other.row_num != self._row_num:
    84                                                           raise ValueError('Row numbers must be equal!')
    85       678       4127.0      6.1     34.4              self._data = self._data + other.data
    86       678       3647.0      5.4     30.4              self._indexes = self._indexes + other.indexes

Total time: 0 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\sparse_matrix_constructor.py
Function: prepend at line 88

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    88                                               ####'#@profile
    89                                               def prepend(self, other):
    90                                                   if isinstance(other, sparse_matrix_constructor):
    91                                                       if other.row_num != self._row_num:
    92                                                           raise ValueError('Row numbers must be equal!')
    93                                                       self._data = other.data + self._data
    94                                                       self._indexes = other.indexes + self._indexes

Total time: 0.0340916 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\sparse_matrix_constructor.py
Function: replace_matrix at line 96

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    96                                               ####'#@profile
    97                                               def replace_matrix(self, from_, to_, other):
    98      1226       5352.0      4.4      5.8          if isinstance(other, sparse_matrix_constructor):
    99      1226       8403.0      6.9      9.0              if other.row_num != self._row_num:
   100                                                           raise ValueError('Row numbers must be equal!')
   101      1226      79250.0     64.6     85.2          self.replace(from_, to_, other.data, other.indexes)

Total time: 5.21961 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\sparse_matrix_constructor.py
Function: get_coo_matrix at line 103

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   103                                               ####'#@profile
   104                                               def get_coo_matrix(self):
   105      1244       6376.0      5.1      0.0          col_num = len(self._indexes)
   106      1244       3012.0      2.4      0.0          if col_num > 1:
   107      1242    4225144.0   3401.9     29.7              cols = np.concatenate([np.full_like(p,i) for i,p in enumerate(self._indexes)])
   108      1242    3384533.0   2725.1     23.8              data = np.concatenate(self._data, axis=0)
   109      1242    1854125.0   1492.9     13.0              rows = np.concatenate(self._indexes, axis=0)
   110      1242    4765470.0   3836.9     33.5              return coo_matrix((data,(rows,cols)),shape=(self._row_num,col_num))
   111                                                   else:
   112         2        940.0    470.0      0.0              return coo_matrix((self._data[0], (self._indexes[0], np.zeros(len(self._indexes[0])))), shape=(self._row_num, col_num))

Total time: 8.94461 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\sparse_matrix_constructor.py
Function: get_matrix at line 114

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   114                                               ####'#@profile
   115                                               def get_matrix(self):
   116      1244   24401759.0  19615.6    100.0          return self.get_coo_matrix().toarray()

