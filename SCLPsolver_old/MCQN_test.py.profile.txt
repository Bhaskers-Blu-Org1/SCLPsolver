Timer unit: 3.66556e-07 s

Total time: 47.3848 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\LP_formulate.py
Function: LP_formulate at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           ####'#@profile
     7                                           def LP_formulate(AA, prim_name, dual_name,  Kset, Jset, tolerance = 0):
     8       613     459367.0    749.4      0.4      nJset = [-v for v in Jset]
     9       613      22675.0     37.0      0.0      prim_sign = np.zeros((len(prim_name),1), dtype = int)
    10       613     371589.0    606.2      0.3      prim_sign[ismember(prim_name,Kset)] = 1
    11       613     315726.0    515.1      0.2      prim_sign[ismember(prim_name,nJset)] = -1
    12       613      10939.0     17.8      0.0      dual_sign = np.zeros((len(dual_name),1), dtype = int)
    13       613     335357.0    547.1      0.3      dual_sign[ismember(dual_name,nJset)] = 1
    14       613     290772.0    474.3      0.2      dual_sign[ismember(dual_name,Kset)] = -1
    15       613  127461828.0 207931.2     98.6      A, pn, dn, ps, ds, err = simplex_procedures(AA.copy(), prim_name.copy(), dual_name.copy(), np.hstack(prim_sign), np.hstack(dual_sign), tolerance)
    16       613       1958.0      3.2      0.0      return pn, dn, A

Total time: 90.6678 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\SCLP_pivot4.py
Function: SCLP_pivot at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                           ####'#@profile
    19                                           def SCLP_pivot(Kset_0, Jset_N, prim_name, dual_name, N1, N2, v1, v2, pivots, base_sequence, KK, JJ, NN, totalK, totalJ,
    20                                                          DEPTH, STEPCOUNT, ITERATION, settings, tolerance):
    21                                           
    22       613       7070.0     11.5      0.0      if N1 == -1:
    23        27        507.0     18.8      0.0          pbaseB1 = np.array([])
    24        27     364081.0  13484.5      0.1          newDict, newPlace = calc_dict(base_sequence, N1, N2, pivots)
    25        27        731.0     27.1      0.0          base_sequence = insertMatrix(base_sequence, newDict, newPlace)
    26        27        152.0      5.6      0.0          AAN1 = None
    27        27        149.0      5.5      0.0          AAN2 = newDict
    28        27     175358.0   6494.7      0.1          BB2 = newDict['A'].copy()
    29        27        498.0     18.4      0.0          pbaseB2 = newDict['prim_name']
    30        27        180.0      6.7      0.0          dbaseB2 = newDict['dual_name']
    31        27       3582.0    132.7      0.0          Jset = -dbaseB2[dbaseB2 < 0]
    32        27        192.0      7.1      0.0          Kset = Kset_0
    33        27        524.0     19.4      0.0          if  not isinstance(v1, list):
    34        27       1529.0     56.6      0.0              Jset = Jset[Jset!=-v1]
    35        27        307.0     11.4      0.0              if v1 > 0:
    36        13       1854.0    142.6      0.0                  Kset = np.append(Kset, v1)
    37                                                   else:
    38                                                       print('v1',v1)
    39                                                   # np.savetxt(relative_to_project('tests/subproblem/BB2.csv'), BB2)
    40                                                   # np.savetxt(relative_to_project('tests/subproblem/pbaseB2.csv'), pbaseB2)
    41                                                   # np.savetxt(relative_to_project('tests/subproblem/dbaseB2.csv'), dbaseB2)
    42                                                   # np.savetxt(relative_to_project('tests/subproblem/Kset.csv'), Kset)
    43                                                   # np.savetxt(relative_to_project('tests/subproblem/Jset.csv'), Jset)
    44        27    1740638.0  64468.1      0.7          pbaseDD, dbaseDD, DD = LP_formulate(BB2, pbaseB2, dbaseB2, Kset, Jset, tolerance)
    45        27      10953.0    405.7      0.0          if np.size(np.setdiff1d(pbaseDD, pbaseB2, assume_unique=True)) == 0 and \
    46                                                           np.size(np.setdiff1d(dbaseDD, dbaseB2, assume_unique=True)) == 0:
    47                                                       print('Basis B2 is optimal')
    48                                                       return prim_name, dual_name, pivots, base_sequence, STEPCOUNT, ITERATION
    49       586       5014.0      8.6      0.0      elif N2 == NN:
    50       307      10708.0     34.9      0.0          pbaseB2 = np.array([])
    51       307   13881945.0  45218.1      5.6          newDict, newPlace = calc_dict(base_sequence, N1, N2, pivots)
    52       307       2117.0      6.9      0.0          AAN1 = newDict
    53       307      14778.0     48.1      0.0          base_sequence = insertMatrix(base_sequence, newDict, newPlace)
    54       307       2007.0      6.5      0.0          AAN2 = None
    55       307   13068897.0  42569.7      5.3          BB1 = newDict['A'].copy()
    56       307       8116.0     26.4      0.0          pbaseB1 = newDict['prim_name']
    57       307       2274.0      7.4      0.0          dbaseB1 = newDict['dual_name']
    58       307      17833.0     58.1      0.0          dbaseB2 = np.array([])
    59       307      39194.0    127.7      0.0          Kset = pbaseB1[pbaseB1 > 0]
    60       307       2260.0      7.4      0.0          Jset = Jset_N
    61       307       5488.0     17.9      0.0          if not isinstance(v2, list):
    62       307      19264.0     62.7      0.0              Kset = Kset[Kset!=v2]
    63       307       4488.0     14.6      0.0              if v2 < 0:
    64         1        112.0    112.0      0.0                  Jset = np.append(Jset, -v2)
    65                                                   else:
    66                                                       print('v2', v2)
    67       307   61039207.0 198824.8     24.7          pbaseDD, dbaseDD, DD = LP_formulate(BB1, pbaseB1, dbaseB1, Kset, Jset, tolerance)
    68       307     203169.0    661.8      0.1          if np.size(np.setdiff1d(pbaseB1, pbaseDD, assume_unique=True)) == 0 and \
    69                                                           np.size(np.setdiff1d(dbaseB1, dbaseDD, assume_unique=True)) == 0:
    70                                                       print('Basis B1 is optimal')
    71                                                       return prim_name, dual_name, pivots, base_sequence, STEPCOUNT, ITERATION
    72                                               else:
    73                                                   # BB1 = AA(:,:,N1)
    74                                                   # BB2 = AA(:,:,N2)
    75       279   10932185.0  39183.5      4.4          N1Dict, N1Place = calc_dict(base_sequence, N1, N1, pivots)
    76       279       2041.0      7.3      0.0          AAN1 = N1Dict
    77                                                   # MatrixAA = insertMatrix( MatrixAA, newDict, newPlace )
    78       279   11818649.0  42360.7      4.8          N2Dict, N2Place = calc_dict(base_sequence, N2, N2, pivots)
    79       279       2027.0      7.3      0.0          AAN2 = N2Dict
    80                                                   # MatrixAA = insertMatrix( MatrixAA, newDict1, newPlace1 )
    81       279   10968567.0  39313.9      4.4          BB2 = N2Dict['A'].copy()
    82       279       7319.0     26.2      0.0          pbaseB1 = N1Dict['prim_name']
    83       279       2211.0      7.9      0.0          dbaseB1 = N1Dict['dual_name']
    84       279       2115.0      7.6      0.0          pbaseB2 = N2Dict['prim_name']
    85       279       1812.0      6.5      0.0          dbaseB2 = N2Dict['dual_name']
    86                                           
    87       279       7290.0     26.1      0.0          if isinstance(v1, list) or isinstance(v2, list):
    88         1        885.0    885.0      0.0              vv =np.setdiff1d(pbaseB1, pbaseB2, assume_unique=True)
    89         1         14.0     14.0      0.0              if isinstance(v2, list):
    90         1          9.0      9.0      0.0                  v2 = vv
    91                                                       else:
    92                                                           v1 = vv
    93       279      35226.0    126.3      0.0          Kset = pbaseB1[pbaseB1 > 0]
    94       279      16728.0     60.0      0.0          Kset = Kset[Kset != v2]
    95       279      15900.0     57.0      0.0          Jset = -dbaseB2[dbaseB2 < 0]
    96       279       9957.0     35.7      0.0          Jset = Jset[Jset != -v1]
    97       279   66593256.0 238685.5     26.9          pbaseDD, dbaseDD, DD = LP_formulate(BB2, pbaseB2, dbaseB2, Kset, Jset, tolerance)
    98                                           
    99       613       7116.0     11.6      0.0      objective = DD[0, 0]
   100                                           
   101       613      10389.0     16.9      0.0      if objective == np.inf or objective == -np.inf:
   102                                                   if N1 == -1:
   103                                                       print('***  beyond this primal problem is unbounded, dual is infeasible')
   104                                                       cases = 'unbound_'
   105                                                   elif N2 == NN:
   106                                                       print('***  beyond this primal problem is infeasible, dual is unbounded')
   107                                                       cases = 'infeas__'
   108                                                   else:
   109                                                       raise Exception('*** infeasibility in middle of base sequence')
   110                                                   return prim_name, dual_name, pivots, base_sequence, STEPCOUNT, ITERATION
   111                                           
   112       613       4209.0      6.9      0.0      i1 = 1
   113       613       4423.0      7.2      0.0      i2 = 1
   114       613       8371.0     13.7      0.0      if N1 >= 0:
   115       586     340294.0    580.7      0.1          i1 = np.size(np.setdiff1d(pbaseB1, pbaseDD, assume_unique=True))
   116       613       7945.0     13.0      0.0      if N2 < NN:
   117       306     147800.0    483.0      0.1          i2 = np.size(np.setdiff1d(pbaseDD, pbaseB2, assume_unique=True))
   118       613       5062.0      8.3      0.0      if i1 == 1 and i2 == 1:
   119       600   25612330.0  42687.2     10.4          pn_new = np.vstack(pbaseDD)
   120       600   23811493.0  39685.8      9.6          dn_new = np.vstack(dbaseDD)
   121       600    1049137.0   1748.6      0.4          dx, dq = extract_rates(pbaseDD, dbaseDD, DD, KK, JJ, totalK, totalJ)
   122       600       7016.0     11.7      0.0          sub_base_seq = {'dq': [dq], 'dx': [dx], 'bases': [DD], 'places': [0]}
   123                                               else:
   124        13         97.0      7.5      0.0          if N1 == -1:
   125                                                       Kex1 =  np.intersect1d(pbaseDD[pbaseDD > 0], Kset_0, assume_unique=True)
   126                                                       Kexclude =  np.intersect1d(Kex1, pbaseB2[pbaseB2 > 0], assume_unique=True)
   127                                                       Jexclude = -np.intersect1d(dbaseDD[dbaseDD < 0], dbaseB2[dbaseB2 < 0], assume_unique=True)
   128        13         96.0      7.4      0.0          elif N2 == NN:
   129        12       8266.0    688.8      0.0              Kexclude =  np.intersect1d(pbaseDD[pbaseDD > 0], pbaseB1[pbaseB1 > 0], assume_unique=True)
   130        12       4903.0    408.6      0.0              Jex1 =  np.intersect1d(dbaseDD[dbaseDD < 0], [-v for v in Jset_N], assume_unique=True)
   131        12       3784.0    315.3      0.0              Jexclude = -np.intersect1d(Jex1, dbaseB1[dbaseB1 < 0], assume_unique=True)
   132                                                   else:
   133         1        714.0    714.0      0.0              Kexclude =  np.intersect1d(pbaseB1[pbaseB1 > 0], pbaseB2[pbaseB2 > 0], assume_unique=True)
   134         1        577.0    577.0      0.0              Jexclude = -np.intersect1d(dbaseB1[dbaseB1 < 0], dbaseB2[dbaseB2 < 0], assume_unique=True)
   135         1         18.0     18.0      0.0              if not isinstance(v1, list):
   136         1         42.0     42.0      0.0                  Kexclude = Kexclude[Kexclude != v1]
   137         1         30.0     30.0      0.0                  Jexclude = Jexclude[Jexclude != -v1]
   138         1         10.0     10.0      0.0              if not isinstance(v2, list):
   139         1         42.0     42.0      0.0                  Kexclude = Kexclude[Kexclude != v2]
   140         1         29.0     29.0      0.0                  Jexclude = Jexclude[Jexclude != -v2]
   141                                                   pn_new, dn_new, sub_base_seq,\
   142        13        125.0      9.6      0.0          STEPCOUNT, ITERATION = SCLP_subproblem(pbaseDD, dbaseDD, DD, N1, N2, v1, v2, Kexclude, Jexclude, pbaseB1, pbaseB2,
   143        13     880240.0  67710.8      0.4                                                  AAN1, AAN2, KK, JJ, NN, totalK, totalJ, DEPTH+1, STEPCOUNT, ITERATION, settings, tolerance)
   144       613       6274.0     10.2      0.0      Nnew = len(sub_base_seq['dx'])
   145       613       3965.0      6.5      0.0      NNold = NN
   146       613      15136.0     24.7      0.0      pivots_new = pivots[0:N1 + 1]
   147       613       5262.0      8.6      0.0      if N1 >= 0:
   148       586       5561.0      9.5      0.0          if len(pivots_new) > N1:
   149       279     175419.0    628.7      0.1              pivots_new[N1] = np.setdiff1d(prim_name[:, N1],  pn_new[:, 0], assume_unique=True).tolist() +\
   150       279     183954.0    659.3      0.1                               np.setdiff1d(dual_name[:, N1], dn_new[:, 0], assume_unique=True).tolist()
   151                                                   else:
   152       307     193905.0    631.6      0.1              pivots_new.append(np.setdiff1d(prim_name[:, N1],  pn_new[:, 0], assume_unique=True).tolist()
   153       307     208895.0    680.4      0.1                            + np.setdiff1d(dual_name[:, N1], dn_new[:, 0], assume_unique=True).tolist())
   154       627       9302.0     14.8      0.0      for nn in range(Nnew - 1):
   155        14       8226.0    587.6      0.0          pivots_new.append(np.setdiff1d(pn_new[:, nn], pn_new[:, nn+1], assume_unique=True).tolist()
   156        14      10832.0    773.7      0.0                        + np.setdiff1d(dn_new[:, nn], dn_new[:, nn+1], assume_unique=True).tolist())
   157       613       6518.0     10.6      0.0      if N2 < NNold:
   158       306     152729.0    499.1      0.1          pivots_new.append(np.setdiff1d(pn_new[:, -1], prim_name[:, N2], assume_unique=True).tolist()
   159       306     185346.0    605.7      0.1                        + np.setdiff1d(dn_new[:, -1], dual_name[:, N2], assume_unique=True).tolist())
   160       306       4781.0     15.6      0.0          if len(pivots[N2:]) > 0:
   161       294       3572.0     12.1      0.0              pivots_new+=(pivots[N2:])
   162       613    1349304.0   2201.1      0.5      pn_new = np.hstack((prim_name[:, 0:N1+1],  pn_new,  prim_name[:, N2:]))
   163       613    1264584.0   2062.9      0.5      dn_new = np.hstack((dual_name[:, 0:N1+1],  dn_new,  dual_name[:, N2:]))
   164                                           
   165       613     105114.0    171.5      0.0      lplaces = np.logical_or(np.array(base_sequence['places']) <= N1, np.array(base_sequence['places']) >= N2)
   166       613      15739.0     25.7      0.0      places = find(lplaces)
   167                                               #print(N1, N2, Nnew)
   168       613       5680.0      9.3      0.0      if len(places) == 0:
   169                                                   if AAN1 is not None:
   170                                                       newPlace = [N1]
   171                                                       newMat = [AAN1]
   172                                                   else:
   173                                                       newPlace = [N1 + Nnew + 1]
   174                                                       newMat = [AAN2]
   175                                               else:
   176       613     152263.0    248.4      0.1          newMat = [base_sequence['bases'][i] for i in places]
   177       613     107548.0    175.4      0.0          newPlace = [base_sequence['places'][i] for i in places]
   178       613     128955.0    210.4      0.1          newPlace = [v if v < N2 else v - (N2 - N1 - 1) + Nnew for v in newPlace]
   179       613      17922.0     29.2      0.0      new_base_sequence = {'dx': base_sequence['dx'][0:N1+1] + sub_base_seq['dx'] + base_sequence['dx'][N2:],
   180       613      11431.0     18.6      0.0                           'dq': base_sequence['dq'][0:N1+1] + sub_base_seq['dq'] + base_sequence['dq'][N2:],
   181       613       5234.0      8.5      0.0                           'bases': newMat, 'places': newPlace}
   182       613       4780.0      7.8      0.0      if N2 < NN and DEPTH == 0:
   183       279       8964.0     32.1      0.0          new_base_sequence = insertMatrix(new_base_sequence, AAN2, N1+Nnew+1)
   184                                               # elif N1 == NN and DEPTH == 0:
   185                                               #     new_base_sequence = insertMatrix(new_base_sequence, AAN2, N1+1)
   186       613       4207.0      6.9      0.0      if Nnew == 1 and DEPTH == 0:
   187       572      18870.0     33.0      0.0          new_base_sequence = insertMatrix(new_base_sequence, {'prim_name': pbaseDD, 'dual_name': dbaseDD, 'A': DD}, N1+Nnew)
   188       613       4296.0      7.0      0.0      return pn_new, dn_new, pivots_new, new_base_sequence, STEPCOUNT, ITERATION

Total time: 0.0505426 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\SCLP_pivot_caseI.py
Function: SCLP_pivot_caseI at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           ####'#@profile
     6                                           def SCLP_pivot_caseI(base_sequence, pivots, prim_name, dual_name, N1, N2, NN):
     7         7       1468.0    209.7      1.1      lplaces = np.logical_or(np.array(base_sequence['places']) <= N1, np.array(base_sequence['places']) >= N2)
     8         7        144.0     20.6      0.1      places = find(lplaces)
     9                                               # print(N1, N2, Nnew)
    10         7         48.0      6.9      0.0      if len(places) == 0:
    11                                                   newMat, newPlace = calc_dict(base_sequence, N1, N2, pivots)
    12                                                   base_sequence['bases'] = [newMat]
    13                                                   base_sequence['places'] = [newPlace]
    14                                               else:
    15         7      72816.0  10402.3     52.8          base_sequence['bases'] = [base_sequence['bases'][i] for i in places]
    16         7       2058.0    294.0      1.5          newPlace = [base_sequence['places'][i] for i in places]
    17         7       1805.0    257.9      1.3          base_sequence['places'] = [v if v < N2 else v - (N2 - N1 - 1) for v in newPlace]
    18                                           
    19         7        455.0     65.0      0.3      base_sequence['dx'] = base_sequence['dx'][0: N1+1] + base_sequence['dx'][N2:]
    20         7        245.0     35.0      0.2      base_sequence['dq'] = base_sequence['dq'][0: N1+1] + base_sequence['dq'][N2:]
    21                                           
    22         7         37.0      5.3      0.0      if N1>=0:
    23         7        139.0     19.9      0.1          pivots_new = pivots[0:N1]
    24                                               else:
    25                                                   pivots_new = []
    26         7         41.0      5.9      0.0      if N1 >=0 and N2 < NN:
    27         7       5435.0    776.4      3.9          pivots_new.append(np.setdiff1d(prim_name[:,N1],prim_name[:,N2], assume_unique =True).tolist()
    28         7       5501.0    785.9      4.0                            + np.setdiff1d(dual_name[:,N1],dual_name[:,N2], assume_unique =True).tolist())
    29         7        151.0     21.6      0.1      pivots_new = pivots_new + pivots[N2:]
    30         7      25002.0   3571.7     18.1      prim_name = np.hstack((prim_name[:,0:N1+1], prim_name[:,N2:]))
    31         7      22474.0   3210.6     16.3      dual_name = np.hstack((dual_name[:,0:N1+1], dual_name[:,N2:]))
    32         7         66.0      9.4      0.0      return base_sequence, pivots_new, prim_name, dual_name

Total time: 243.405 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\SCLP_solver4.py
Function: SCLP_solver at line 12

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    12                                           ####'#@profile
    13                                           def SCLP_solver(x_0, del_x_0, q_N, del_q_N, T, del_T, prim_name, dual_name, ThetaBar, cases, B1, B2, pivots,
    14                                                             base_sequence, totalK, totalJ, DEPTH, STEPCOUNT, ITERATION, settings, tolerance):
    15                                           
    16        14        115.0      8.2      0.0      ITERATION[DEPTH] = 0
    17        14        184.0     13.1      0.0      if  len(prim_name.shape) > 1:
    18        14        153.0     10.9      0.0          pn = prim_name[:, 0]
    19                                               else:
    20                                                   pn = prim_name
    21        14        106.0      7.6      0.0      if len(dual_name.shape) > 1:
    22        14        112.0      8.0      0.0          dn = dual_name[:, 0]
    23                                               else:
    24                                                   dn = dual_name
    25        14       2815.0    201.1      0.0      klist = np.sort(np.append(pn[pn > 0], dn[dn > 0]))
    26        14       4486.0    320.4      0.0      jlist = np.sort(-np.append(pn[pn < 0], dn[dn < 0]))
    27                                           
    28        14        118.0      8.4      0.0      KK = len(klist)
    29        14         97.0      6.9      0.0      JJ = len(jlist)
    30                                           
    31        14         90.0      6.4      0.0      theta = 0
    32        14         81.0      5.8      0.0      tol_coeff = 1  # tolerance multiplier
    33        14         82.0      5.9      0.0      prevProblem = 0
    34        14        110.0      7.9      0.0      lastCollision = dict()
    35                                           
    36        14     213168.0  15226.3      0.0      Kset_0 = klist[np.logical_or(x_0 > 0, np.logical_and(x_0 == 0, del_x_0 > 0))]
    37        14    1281950.0  91567.9      0.2      Jset_N = jlist[np.logical_or(q_N > 0, np.logical_and(q_N == 0, del_q_N > 0))]
    38                                           
    39       634       6874.0     10.8      0.0      while cases != 'complete' and cases != 'solved__':
    40                                           
    41                                                   # Kset_0 = klist[np.logical_or(np.hstack(x_0) > 0, np.logical_and(np.hstack(x_0) == 0, np.hstack(del_x_0) > 0))]
    42                                                   # Jset_N = jlist[np.logical_or(np.hstack(q_N) > 0, np.logical_and(np.hstack(q_N) == 0, np.hstack(del_q_N) > 0))]
    43                                           
    44       620   55417125.0  89382.5      8.3          spdx = sp.hstack(base_sequence['dx'])
    45       620   53835555.0  86831.5      8.1          spdq = sp.hstack(base_sequence['dq'])
    46                                           
    47       620      46236.0     74.6      0.0          if(len(set(base_sequence['places'])) < len(base_sequence['places'])):
    48                                                       print('hwew')
    49                                           
    50       620   67779812.0 109322.3     10.2          sdx = spdx.sign().toarray()
    51       620   75607918.0 121948.3     11.4          sdq = spdq.sign().toarray()
    52       620    3053675.0   4925.3      0.5          check_sd(sdx, True)
    53       620    2904006.0   4683.9      0.4          check_sd(sdq, False)
    54       620    5331259.0   8598.8      0.8          dx = spdx.toarray()
    55       620    5411992.0   8729.0      0.8          dq = spdq.toarray()
    56       620      11941.0     19.3      0.0          if STEPCOUNT == 11370:
    57                                                       print('bbb')
    58                                           
    59       620    9871574.0  15921.9      1.5          tau, dtau = calc_equations(klist, jlist, pivots, x_0, del_x_0, q_N, del_q_N, T, del_T, dx, dq)
    60       620   66462908.0 107198.2     10.0          x, del_x, q, del_q = calc_states(dx, dq, x_0, del_x_0, q_N, del_q_N, tau, dtau, sdx, sdq, tolerance)
    61       620       9465.0     15.3      0.0          cases, Delta, N1, N2, v1, v2, problem = classification(tau, dtau, klist, jlist, dx, dq, x, del_x, q, del_q,
    62       620   53095033.0  85637.1      8.0                                                                 prim_name, B1, B2, sdx, sdq, tolerance, 1)
    63       620       7539.0     12.2      0.0          if problem['result'] == 1 or problem['result'] == 2 or problem['result'] == 3:
    64                                                       #TODO: review next if for bugs
    65                                                       if problem['result'] == 2 and problem['timeProblem']['result'] == 2 and tol_coeff > 10000 and\
    66                                                               len(np.intersect1d(problem['timeProblem']['data'], np.arange(lastCollision['N1']+1, lastCollision['N2']), assume_unique=True))==0:
    67                                                           tol_coeff = 0.1
    68                                                           while problem['result'] == 2 and tol_coeff > 0.0001:
    69                                                               print('trying to resolve * ', tol_coeff, ' ...')
    70                                                               cases, Delta, N1, N2, v1, v2, problem = classification(tau, dtau, klist, jlist, dx, dq, x, del_x, q,
    71                                                                                                                  del_q,
    72                                                                                                                  prim_name, B1, B2, sdx, sdq, tolerance, tol_coeff)
    73                                                               tol_coeff = 0.1 * tol_coeff
    74                                                           tol_coeff = 1
    75                                                       else:
    76                                                           tol_coeff = 10 * tol_coeff
    77                                                           prevProblem = problem['result']
    78                                                           if 'data' in problem.keys():
    79                                                               print('Problem data: ',str(problem['data']))
    80       620       5345.0      8.6      0.0          elif problem['result'] == 4:
    81                                                       print('More than two variables leave in time shrink ....')
    82                                                       while tol_coeff <= 10000 and problem['result'] == 4:
    83                                                           if tol_coeff < 10 and prevProblem !=2:
    84                                                               if N2 - N1 == 2 or tol_coeff <= 0.001:
    85                                                                   tol_coeff = 10
    86                                                               else:
    87                                                                   tol_coeff = 0.1 * tol_coeff
    88                                                           else:
    89                                                               tol_coeff = 10 * tol_coeff
    90                                                           print('trying to resolve * ', tol_coeff, ' ...')
    91                                                           cases, Delta, N1, N2, v1, v2, problem = classification(tau, dtau, klist, jlist, dx, dq, x, del_x, q, del_q,
    92                                                                                                              prim_name, B1, B2, sdx, sdq, tolerance, tol_coeff)
    93                                                       if problem['result'] == 0:
    94                                                           tol_coeff = 1
    95                                                           print('ok!')
    96                                                       else:
    97                                                           print('fail!')
    98                                                       prevProblem = 4
    99                                                   else:
   100       620       5136.0      8.3      0.0              tol_coeff = 1
   101       620       4578.0      7.4      0.0              prevProblem = problem['result']
   102                                           
   103       620       4782.0      7.7      0.0          if problem['result'] > 0 and DEPTH == 0:
   104                                                       if lastCollision['cases'] == 'Case ii_':
   105                                                           # rewinding to previous iteration
   106                                                           print('rewind... trying to resolve * ', tol_coeff, ' ...')
   107                                                           Delta = lastCollision['Delta']
   108                                                           x_0 = x_0 - del_x_0 * Delta
   109                                                           q_N = q_N - del_q_N * Delta
   110                                                           T = T - del_T * Delta
   111                                                           theta = theta - Delta
   112                                                           N1 = lastCollision['N1']
   113                                                           N2 = lastCollision['N2']
   114                                                           #             v1 = lastCollision.v2 #change varible order
   115                                                           #             v2 = lastCollision.v1 #change varible order
   116                                                           Nnew = lastCollision['Nnew']
   117                                                           N2_cor = N2+Nnew
   118                                                           N2b = max(N2, N2_cor)
   119                                                           lplaces = np.logical_or(np.array(base_sequence['places']) <= N1,
   120                                                                                   np.array(base_sequence['places']) >= N2b)
   121                                                           places = find(lplaces)
   122                                                           if len(places) == 0:
   123                                                               newMat, newPlace = calc_dict(base_sequence, N1, N2b, pivots)
   124                                                               base_sequence['bases'] = [newMat]
   125                                                               base_sequence['places'] = [newPlace]
   126                                                           else:
   127                                                               base_sequence['bases'] = [base_sequence['bases'][i] for i in places]
   128                                                               newPlace = [base_sequence['places'][i] for i in places]
   129                                                               base_sequence['places'] = [v if v < N2b else v - Nnew for v in newPlace]
   130                                                           Npivots = len(lastCollision['old_pivots'])
   131                                                           if N1 > 0:
   132                                                               if N2_cor - 1 == len(base_sequence['dx']):
   133                                                                       pivots = pivots[0:N1] + lastCollision['old_pivots']
   134                                                               else:
   135                                                                   pivots = pivots[0:N1] + lastCollision['old_pivots'] + pivots[N1 + Nnew + Npivots:]
   136                                                           else:
   137                                                               pivots = lastCollision['old_pivots'] + pivots[(N1 + Nnew + Npivots):]
   138                                                           prim_name = np.hstack((prim_name[:, 0:N1+1], lastCollision['old_pn'], prim_name[:, N2_cor:]))
   139                                                           dual_name = np.hstack((dual_name[:, 0:N1+1], lastCollision['old_dn'], dual_name[:, N2_cor:]))
   140                                                           base_sequence['dx'] = base_sequence['dx'][0:N1+1] + lastCollision['old_dx'] + base_sequence['dx'][N2_cor:]
   141                                                           base_sequence['dq'] = base_sequence['dq'][0:N1+1] + lastCollision['old_dq'] + base_sequence['dq'][N2_cor:]
   142                                                           # Kset_0 = klist[np.logical_or(x_0 > 0, np.logical_and(x_0 == 0, del_x_0 > 0))]
   143                                                           # Jset_N = jlist[np.logical_or(q_N > 0, np.logical_and(q_N == 0, del_q_N > 0))]
   144                                                           # flag = True
   145                                                           #             if problem.result == 2
   146                                                           #                 nn1 = min(problem.timeProblem.data)
   147                                                           #                 nn2 = max(problem.timeProblem.data)
   148                                                           #                 if length(problem.timeProblem.data) == length(nn1:nn2)
   149                                                           #                     if nn1 <= N1
   150                                                           #                         N1 = nn1 - 1
   151                                                           #                     end
   152                                                           #                     N2 = nn2 - Nnew + Nold + 1
   153                                                           #                     v1 = lastCollision.v1
   154                                                           #                     v2 = lastCollision.v2
   155                                                           #                     cases = lastCollision.cases
   156                                                           #                 else
   157                                                           #                     flag= true
   158                                                           #                 end
   159                                                           #             else
   160                                                           #                 flag = true
   161                                                           #             end
   162                                                           spdx = sp.hstack(base_sequence['dx'])
   163                                                           spdq = sp.hstack(base_sequence['dq'])
   164                                                           sdx = spdx.sign().toarray()
   165                                                           sdq = spdq.sign().toarray()
   166                                                           dx = spdx.toarray()
   167                                                           dq = spdq.toarray()
   168                                           
   169                                                           tau, dtau = calc_equations(klist, jlist, pivots, x_0, del_x_0, q_N, del_q_N, T, del_T, dx, dq)
   170                                                           x, del_x, q, del_q = calc_states(dx, dq, x_0, del_x_0, q_N, del_q_N, tau, dtau, sdx, sdq, tolerance)
   171                                                           cases, Delta, N1, N2, v1, v2, problem = classification(tau, dtau, klist, jlist, dx, dq, x, del_x, q,
   172                                                                                                                  del_q,
   173                                                                                                                  prim_name, B1, B2, sdx, sdq, tolerance, tol_coeff)
   174                                                           if problem['result'] == 4:
   175                                                               while tol_coeff >= 0.001 and problem['result'] == 4:
   176                                                                   if tol_coeff >= 10:
   177                                                                       if tol_coeff <= 1000:
   178                                                                           tol_coeff = 10 * tol_coeff
   179                                                                       else:
   180                                                                           tol_coeff = 0.1
   181                                                                   else:
   182                                                                       tol_coeff = 0.1 * tol_coeff
   183                                                                   print('trying to resolve * ', tol_coeff, ' ...')
   184                                                                   cases, Delta, N1, N2, v1, v2, problem = classification(tau, dtau, klist, jlist, dx, dq, x,
   185                                                                                                                          del_x, q, del_q, prim_name, B1, B2,
   186                                                                                                                          sdx, sdq, tolerance, tol_coeff)
   187                                                                   if problem['result'] == 0:
   188                                                                       tol_coeff = 1
   189                                                                       print('ok!')
   190                                                                   else:
   191                                                                       print('fail!')
   192                                           
   193       620       5719.0      9.2      0.0          if cases == 'complete' and DEPTH > 0:
   194        13        362.0     27.8      0.0              Delta = min(0.1 * theta, (1 - theta) / 2)
   195                                           
   196       620       8167.0     13.2      0.0          if DEPTH == 0 and theta + Delta > ThetaBar:
   197         1          8.0      8.0      0.0              cases = 'solved__'
   198         1         11.0     11.0      0.0              Delta = ThetaBar - theta
   199                                           
   200       620       4847.0      7.8      0.0          if cases == 'complete' and DEPTH == 0:
   201                                                       Delta = 0.1 * theta
   202                                           
   203       620       7116.0     11.5      0.0          NN = len(tau)
   204       620       5452.0      8.8      0.0          STEPCOUNT = STEPCOUNT + 1
   205                                           
   206       620       6121.0      9.9      0.0          ITERATION[DEPTH] = ITERATION[DEPTH] + 1
   207       620       5001.0      8.1      0.0          theta1 = theta + Delta
   208                                           
   209       620       5817.0      9.4      0.0          if theta1 > 1 and DEPTH > 0:
   210                                                       print("Theta > 1....")
   211                                                       #cases = 'theta>1_'
   212                                           
   213       620     427492.0    689.5      0.1          print(STEPCOUNT, DEPTH, ITERATION[DEPTH], JJ, 'x', KK, NN, theta, theta1, cases, N1, N2, v1, v2, len(base_sequence['places']))
   214       620       7298.0     11.8      0.0          lastCollision = {'cases': cases, 'theta': theta, 'Delta': Delta,
   215       620      19522.0     31.5      0.0                                   'N1': N1, 'N2': N2, 'v1': v1, 'v2': v2}
   216       620       5800.0      9.4      0.0          if cases == 'Case i__':
   217         7     147633.0  21090.4      0.0              base_sequence, pivots, prim_name, dual_name = SCLP_pivot_caseI(base_sequence, pivots, prim_name, dual_name, N1, N2, NN)
   218                                           
   219       613       5419.0      8.8      0.0          elif cases == 'Case ii_' or cases == 'Case iii':
   220       599       4979.0      8.3      0.0              if cases == 'Case ii_':
   221       278       3886.0     14.0      0.0                  cor_N1 = N1+1
   222       278       2813.0     10.1      0.0                  if N1 > -1:
   223       278       5310.0     19.1      0.0                      lastCollision['old_pivots'] = pivots[N1:N2+1].copy()
   224                                                           else:
   225                                                               lastCollision['old_pivots'] = pivots[N1+1:N2+1].copy()
   226       278       3501.0     12.6      0.0                  lastCollision['old_dx'] = base_sequence['dx'][cor_N1: N2].copy()
   227       278       3090.0     11.1      0.0                  lastCollision['old_dq'] = base_sequence['dq'][cor_N1: N2].copy()
   228       278      22439.0     80.7      0.0                  lastCollision['old_pn'] = prim_name[:, cor_N1: N2].copy()
   229       278      27045.0     97.3      0.0                  lastCollision['old_dn'] = dual_name[:, cor_N1: N2].copy()
   230                                           
   231       599       6571.0     11.0      0.0              prim_name, dual_name, pivots, base_sequence, STEPCOUNT, ITERATION = SCLP_pivot(Kset_0, Jset_N, prim_name, dual_name, N1, N2, v1,
   232       599       5333.0      8.9      0.0                                                                       v2, pivots, base_sequence, KK, JJ, NN, totalK, totalJ, DEPTH,
   233       599  262717250.0 438593.1     39.6                                                                       STEPCOUNT, ITERATION, settings, tolerance)
   234                                           
   235                                                       #statData = {'cases': cases, 'N1': N1, 'N2': N2, 'minBases': settings['minBases'],
   236                                                       #            'maxBases': settings['maxBases'], 'basesRate': settings['basesRate']}
   237                                                       #base_sequence = clearBaseSequence(base_sequence, statData)
   238                                           
   239       620      22146.0     35.7      0.0          lastCollision['Nnew'] = len(base_sequence['dx'])-NN
   240                                                   #print(STEPCOUNT, base_sequence['places'], [sum(EE['A'][0,:]) for EE in base_sequence['bases']])
   241       620      90060.0    145.3      0.0          x_0 = x_0 + del_x_0 * Delta
   242       620      61913.0     99.9      0.0          q_N = q_N + del_q_N * Delta
   243       620      13224.0     21.3      0.0          T = T + del_T * Delta
   244       620       5253.0      8.5      0.0          theta = theta1
   245                                           
   246        14        130.0      9.3      0.0      return prim_name, dual_name, x_0, q_N, T, pivots, base_sequence, STEPCOUNT

Total time: 3.28383 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\SCLP_subproblem4.py
Function: SCLP_subproblem at line 8

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                           ####'#@profile
     9                                           def SCLP_subproblem(pbaseDD,dbaseDD,DD, N1,N2,v1,v2,Kexclude,Jexclude,pbaseB1,pbaseB2,
    10                                                                AAN1,AAN2, KK, JJ, NN, totalK, totalJ, DEPTH, STEPCOUNT, ITERATION, settings, tolerance):
    11                                           
    12                                           
    13                                               #[~, NN] = size(prim_name)
    14                                               # Excluding the k's and j's which are > 0
    15        13       5590.0    430.0      0.1      lKDDin = np.logical_not(np.in1d(pbaseDD, Kexclude, assume_unique=True))
    16        13       1418.0    109.1      0.0      lJDDin = np.logical_not(np.in1d(dbaseDD, -Jexclude, assume_unique=True))
    17                                               # size(pbaseDD)
    18                                               # size(dbaseDD)
    19        13        437.0     33.6      0.0      pbaseDDred = pbaseDD[lKDDin]
    20        13        232.0     17.8      0.0      dbaseDDred = dbaseDD[lJDDin]
    21        13     183788.0  14137.5      2.1      DDred = DD[find(np.hstack(([True],lKDDin)))[:,None], find(np.hstack(([True],lJDDin)))]
    22        13        368.0     28.3      0.0      if len(pbaseB1) > 0:
    23        13       7162.0    550.9      0.1          pbaseB1red = pbaseB1[np.logical_not(np.in1d(pbaseB1,Kexclude, assume_unique=True))]
    24                                               else:
    25                                                   pbaseB1red = []
    26        13        111.0      8.5      0.0      if len(pbaseB2) > 0:
    27         1        472.0    472.0      0.0          pbaseB2red = pbaseB2[np.logical_not(np.in1d(pbaseB2,Kexclude, assume_unique=True))]
    28                                               else:
    29        12         63.0      5.2      0.0          pbaseB2red = []
    30                                           
    31        13       2223.0    171.0      0.0      klist = np.sort(np.append(pbaseDDred[pbaseDDred > 0], dbaseDDred[dbaseDDred > 0]))
    32        13       3944.0    303.4      0.0      jlist = np.sort(-np.append(pbaseDDred[pbaseDDred < 0], dbaseDDred[dbaseDDred < 0]))
    33                                           
    34        13        194.0     14.9      0.0      lk = np.size(klist)
    35        13        115.0      8.8      0.0      lj = np.size(jlist)
    36                                           
    37                                               # The starting sequence
    38        13     105270.0   8097.7      1.2      pn1 = np.vstack(pbaseDDred)
    39        13     456220.0  35093.8      5.1      dn1 = np.vstack(dbaseDDred)
    40        13      19741.0   1518.5      0.2      dx, dq = extract_rates(pbaseDDred, dbaseDDred, DDred, lk, lj, totalK, totalJ)
    41        13      86115.0   6624.2      1.0      new_base_sequence = {'dx': [dx], 'dq': [dq], 'bases': [{'prim_name': pbaseDDred, 'dual_name': dbaseDDred,'A': DDred.copy()}],
    42        13        186.0     14.3      0.0                           'places': [0]}
    43        13         70.0      5.4      0.0      pivots=[]
    44                                               # performing the left and right first pivots
    45                                               #		the right pivot:
    46        13       1127.0     86.7      0.0      if np.size(pbaseB2red) > 0:
    47         1         15.0     15.0      0.0          if not isinstance(v1, list):
    48         1         14.0     14.0      0.0              if v1 > 0:
    49                                                           K_0 = [v1]
    50                                                           J_N = []
    51                                                       else:
    52         1          7.0      7.0      0.0                  K_0 = []
    53         1         10.0     10.0      0.0                  J_N = [-v1]
    54                                                   else:
    55                                                       K_0 = []
    56                                                       J_N = []
    57         1         11.0     11.0      0.0          if not isinstance(v2, list):
    58         1         35.0     35.0      0.0              if v2 < 0:
    59                                                           J_N.append(-v2)
    60         1         76.0     76.0      0.0          from .SCLP_pivot4 import SCLP_pivot
    61         1          9.0      9.0      0.0          pn1,dn1,pivots,new_base_sequence, STEPCOUNT, ITERATION = SCLP_pivot(K_0,J_N,pn1,dn1,0,1,[],v1,pivots, new_base_sequence,
    62         1      36817.0  36817.0      0.4                                                                              lk, lj, 1, totalK, totalJ, DEPTH, STEPCOUNT, ITERATION, settings, tolerance)
    63                                               #		the left pivot:
    64        13        137.0     10.5      0.0      if np.size(pbaseB1red) > 0:
    65        13        141.0     10.8      0.0          if not isinstance(v2, list):
    66        13        165.0     12.7      0.0              if v2 > 0:
    67        13         64.0      4.9      0.0                  K_0 = [v2]
    68        13         67.0      5.2      0.0                  J_N = []
    69                                                       else:
    70                                                           K_0 = []
    71                                                           J_N = [-v2]
    72                                                   else:
    73                                                       K_0 = []
    74                                                       J_N = []
    75        13         80.0      6.2      0.0          if not isinstance(v1, list):
    76         1          8.0      8.0      0.0              if v1 > 0:
    77                                                           K_0.append(v1)
    78        13        783.0     60.2      0.0          from .SCLP_pivot4 import SCLP_pivot
    79        13         80.0      6.2      0.0          pn1,dn1,pivots,new_base_sequence, STEPCOUNT, ITERATION = SCLP_pivot(K_0,J_N,pn1,dn1,-1,0,v2,[],pivots,new_base_sequence,
    80        13    1755810.0 135062.3     19.6                                                                              lk, lj, 1, totalK, totalJ, DEPTH, STEPCOUNT, ITERATION, settings, tolerance)
    81                                               # prepare the boundaries
    82        13        159.0     12.2      0.0      T = 1
    83        13         73.0      5.6      0.0      del_T = 0
    84                                           
    85        13        358.0     27.5      0.0      x_0=np.zeros((lk,1))
    86        13        229.0     17.6      0.0      q_N=np.zeros((lj,1))
    87        13        126.0      9.7      0.0      del_x_0=np.zeros((lk,1))
    88        13        204.0     15.7      0.0      del_q_N=np.zeros((lj,1))
    89                                           
    90                                               # Boundary values for one sided subproblem, collision at t=0
    91        13        208.0     16.0      0.0      if N1 == -1:
    92                                                   # The case of v1 > 0, collision case iv_a
    93                                                   if not isinstance(v1, list) and v1 > 0:
    94                                                       dx_DD_v1 = DD[1:,0][pbaseDD == v1][0]
    95                                                       lk1 = klist == v1
    96                                                       x_0[lk1] = -dx_DD_v1
    97                                                       del_x_0[lk1] = dx_DD_v1
    98                                                   # The case of v1 < 0, collision case iii_a
    99                                                   if not isinstance(v1, list) and v1 < 0:
   100                                                       #dq_B2_v1 = AA( 1, j1B2 + 1, N2 )
   101                                                       dq_B2_v1 = AAN2['A'][0,1:][AAN2['dual_name'] == v1][0]
   102                                                       lj1 = jlist == -v1
   103                                                       #q_N[lj1] = 0
   104                                                       del_q_N[lj1] = -dq_B2_v1
   105                                               #
   106                                               #
   107                                               # Boundary values for one sided subproblem, collision at t=T
   108        13        103.0      7.9      0.0      elif N2 == NN:
   109                                                   # The case of v2 > 0, collision case iii_b
   110        12        216.0     18.0      0.0          if not isinstance(v2, list) and v2 > 0:
   111                                                       #dx_B1_v2 = AA( i2B1 + 1, 1, N1 )
   112        12        964.0     80.3      0.0              dx_B1_v2 = AAN1['A'][1:,0][AAN1['prim_name'] == v2][0]
   113        12        212.0     17.7      0.0              lk2 = klist == v2
   114                                                       #x_0[lk2] = 0
   115        12        443.0     36.9      0.0              del_x_0[lk2] = -dx_B1_v2
   116                                                   # The case of v2 < 0, collision case iv_b
   117        12        143.0     11.9      0.0          if not isinstance(v2, list) and v2 < 0:
   118                                                       dq_DD_v2 = DD[0,1:][dbaseDD == v2][0]
   119                                                       lj2 = jlist == -v2
   120                                                       q_N[lj2] = -dq_DD_v2
   121                                                       del_q_N[lj2] = dq_DD_v2
   122                                               #
   123                                               #
   124                                               # Boundary values for two sided subproblem, collision at 0<t<T
   125                                               #  setting boundaries for the second exiting variable v1
   126                                               else:
   127         1         11.0     11.0      0.0          if not isinstance(v1, list) and v1 > 0:
   128                                                       dx_DD_v1 = DD[1:,0][pbaseDD == v1][0]
   129                                                       lk1 = klist == v1
   130                                                       x_0[lk1] = -dx_DD_v1
   131                                                       #dx_B1_v1 = AA( i1B1 + 1, 1, N1 )
   132                                                       dx_B1_v1 = AAN1['A'][1:,0][AAN1['prim_name'] == v1][0]
   133                                                       del_x_0[lk1] = -0.5*dx_B1_v1 + dx_DD_v1
   134         1          6.0      6.0      0.0          if not isinstance(v1, list) and v1 < 0:
   135                                                       #dq_B2_v1 = AA( 1, j1B2 + 1, N2 )
   136         1         44.0     44.0      0.0              dq_B2_v1 = AAN2['A'][0,1:][AAN2['dual_name'] == v1][0]
   137         1         21.0     21.0      0.0              lj1 = jlist == -v1
   138                                                       #q_N(j1) = 0
   139         1         27.0     27.0      0.0              del_q_N[lj1] = -0.5*dq_B2_v1
   140                                                   #  setting boundaries for the first exiting variable v2
   141         1         14.0     14.0      0.0          if not isinstance(v2, list) and v2 > 0:
   142                                                       #dx_B1_v2 = AA( i2B1 + 1, 1, N1 )
   143         1         36.0     36.0      0.0              dx_B1_v2 = AAN1['A'][1:,0][AAN1['prim_name'] == v2][0]
   144         1         12.0     12.0      0.0              lk2 = klist == v2
   145                                                       #x_0[lk2] = 0
   146         1         14.0     14.0      0.0              del_x_0[lk2] = -0.5*dx_B1_v2
   147         1         11.0     11.0      0.0          if not isinstance(v2, list) and v2 < 0:
   148                                                       dq_DD_v2 = DD[0,1:][dbaseDD == v2][0]
   149                                                       lj2 = jlist == -v2
   150                                                       q_N[lj2] = -dq_DD_v2
   151                                                       #dq_B2_v2 = AA(1, j2B2 + 1, N2 )
   152                                                       dq_B2_v2 = AAN2['A'][0,1:][AAN2['dual_name'] == v2][0]
   153                                                       del_q_N[lj2] = -0.5*dq_B2_v2 + dq_DD_v2
   154                                           
   155                                               #############################################
   156                                               # solving the subproblem
   157        13        876.0     67.4      0.0      from .SCLP_solver4 import SCLP_solver
   158                                               pn1,dn1, x_0, q_N, T, pivots,\
   159        13         85.0      6.5      0.0      new_base_sequence, STEPCOUNT = SCLP_solver( x_0, del_x_0, q_N, del_q_N, T, del_T, pn1,dn1, 1,'sub_prob', pbaseB1red,
   160        13    3729039.0 286849.2     41.6                                                  pbaseB2red, pivots, new_base_sequence, totalK, totalJ, DEPTH, STEPCOUNT, ITERATION, settings, tolerance)
   161                                               #############################################
   162                                               # the list of pivots:
   163                                               #[~, ~, pivots] = calc_pivots3(pn1, dn1)
   164        13        138.0     10.6      0.0      Npivots = len(pivots)
   165                                               #Warning this based on assumption that first basis in new_base_sequence is equal to the AAN1 and/or last basis is equal to the AAN2
   166        13        170.0     13.1      0.0      if N1 != -1 and Npivots > 0:
   167        13        116.0      8.9      0.0          pm1 = AAN1['prim_name']
   168        13        102.0      7.8      0.0          dm1 = AAN1['dual_name']
   169        13      10208.0    785.2      0.1          pp1 = np.setdiff1d(pn1[:,0], pm1)
   170        13      12403.0    954.1      0.1          pp2 = np.setdiff1d(dn1[:,0], dm1)
   171        13        155.0     11.9      0.0          if len(pp1) > 1 or len(pp2) > 1:
   172                                                       print('Incomplete pivot...')
   173                                                       raise Exception()
   174        13        123.0      9.5      0.0          elif len(pp1) == 0 and len(pp2) == 0:
   175        13         91.0      7.0      0.0              pass
   176                                                   elif len(pp1) == 1 and len(pp2) == 1:
   177                                                       if pivots[0][0] == pp2[0] and pivots[0][1] == pp1[0]:
   178                                                           pass
   179                                                       elif pivots[0][0] != pp2[0] and pivots[0][1] != pp1[0]:
   180                                                           piv = [[pp2[0],pp1[0]]]
   181                                                           pivots = piv + pivots
   182                                                       else:
   183                                                           print('Incompatible pivots...')
   184                                                           raise Exception()
   185                                                   else:
   186                                                       print('Undefined pivot...')
   187                                                       raise Exception()
   188        13     500952.0  38534.8      5.6          DD1 = AAN1['A'].copy()
   189        13        378.0     29.1      0.0          k1 = len(pm1)
   190        13        111.0      8.5      0.0          l1 = len(dm1)
   191        13        337.0     25.9      0.0          if N2 != NN:
   192         1       1205.0   1205.0      0.0              pp1 = np.setdiff1d(pn1[:, -1], AAN2['prim_name'])
   193         1        844.0    844.0      0.0              pp2 = np.setdiff1d(dn1[:, -1], AAN2['dual_name'])
   194         1         12.0     12.0      0.0              if len(pp1) > 1 or len(pp2) > 1:
   195                                                           print('Incomplete pivot...')
   196                                                           raise Exception()
   197         1         11.0     11.0      0.0              elif len(pp1) == 0 and len(pp2) == 0:
   198         1         16.0     16.0      0.0                  pivots = pivots[:-1]
   199         1         10.0     10.0      0.0                  Npivots -= 1
   200                                                       elif len(pp1) == 1 and len(pp2) == 1:
   201                                                           pass
   202        13        682.0     52.5      0.0          pn_new=np.empty(shape=(k1,len(pivots)), dtype=int)
   203                                                   #pn_new =np.union1d(pn1, Kexclude)
   204        13        192.0     14.8      0.0          dn_new=np.empty(shape=(l1,len(pivots)), dtype=int)
   205        13      41908.0   3223.7      0.5          new_base_sequence = {'dx': [], 'dq': [], 'bases': [], 'places': []}
   206        13        729.0     56.1      0.0          zz1 = np.zeros(k1)
   207        13        266.0     20.5      0.0          zz2 = np.zeros(l1)
   208        40        473.0     11.8      0.0          for i,piv1 in enumerate(pivots):
   209        27    1926686.0  71358.7     21.5              DD1,pm1,dm1,zz1,zz2 = full_pivot(DD1,find(pm1==piv1[0])[0],find(dm1==piv1[1])[0],pm1.copy(),dm1.copy(),zz1.copy(),zz2.copy())
   210        27        931.0     34.5      0.0              pn_new[:,i] = pm1
   211        27        599.0     22.2      0.0              dn_new[:,i] = dm1
   212        27      55263.0   2046.8      0.6              dx, dq = extract_rates(pm1, dm1, DD1, KK, JJ, totalK, totalJ)
   213        27        342.0     12.7      0.0              new_base_sequence['dx'].append(dx)
   214        27        238.0      8.8      0.0              new_base_sequence['dq'].append(dq)
   215                                               elif Npivots >0:
   216                                                   pm1 = AAN2['prim_name']
   217                                                   dm1 = AAN2['dual_name']
   218                                                   DD1 = AAN2['A'].copy()
   219                                                   k1 = len(pm1)
   220                                                   l1 = len(dm1)
   221                                                   pn_new = np.empty(shape=(k1, Npivots), dtype=int)
   222                                                   dn_new = np.empty(shape=(l1, Npivots), dtype=int)
   223                                                   new_base_sequence = {'dx': [], 'dq': [], 'bases': [], 'places': []}
   224                                                   zz1 = np.zeros(k1)
   225                                                   zz2 = np.zeros(l1)
   226                                                   for i,piv1 in enumerate(reversed(pivots)):
   227                                                       [DD1,pm1,dm1,zz1,zz2] = full_pivot(DD1,find(pm1==piv1[1]),find(dm1==piv1[0]),pm1.copy(),dm1.copy(),zz1.copy(),zz2.copy())
   228                                                       pn_new[:, Npivots-i-1] = pm1
   229                                                       dn_new[:, Npivots-i-1] = dm1
   230                                                       dx, dq = extract_rates(pm1, dm1, DD1, KK, JJ, totalK, totalJ)
   231                                                       new_base_sequence['dx'].append(dx)
   232                                                       new_base_sequence['dq'].append(dq)
   233                                                   new_base_sequence['dx'].reverse()
   234                                                   new_base_sequence['dq'].reverse()
   235                                               else:
   236                                                   pn_new = np.vstack(np.union1d(pn1[:,0], Kexclude))
   237                                                   dn_new = np.vstack(np.union1d(dn1[:,0], -Jexclude))
   238        13         91.0      7.0      0.0      return  pn_new,dn_new, new_base_sequence, STEPCOUNT, ITERATION

Total time: 0.0413875 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_boundaries.py
Function: calc_boundaries at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           ####'#@profile
     6                                           def calc_boundaries(G,F,H,b,d,alpha,gamma, tolerance = 0, solve_gen_LP = False):
     7         1         23.0     23.0      0.0      K, J = np.shape(G)
     8         1          9.0      9.0      0.0      L = np.shape(F)[1]
     9         1          6.0      6.0      0.0      I = np.shape(H)[0]
    10         1          8.0      8.0      0.0      if I == 0 & L == 0:
    11                                                   x_0 = alpha
    12                                                   q_N = np.vstack(-gamma)
    13                                                   if np.any(x_0 < 0):
    14                                                       raise Exception('***  Problem not primal feasible')
    15                                                   if np.any(q_N < 0):
    16                                                       raise Exception('***  Problem not dual feasible')
    17                                                   return x_0, q_N
    18         1          4.0      4.0      0.0      if solve_gen_LP:
    19                                                   DD0 = np.vstack((-np.hstack((0, gamma, np.zeros((1,L)))), np.hstack((alpha, G, F)), np.hstack((np.zeros((I,1)), H, np.zeros((I, L))))))
    20                                                   pn = np.vstack(np.hstack((np.arange(1,K+1), -np.arange(J + 1, J + I + 1))))
    21                                                   ps = np.zeros((K + I, 1), dtype = int)
    22                                                   dn = np.hstack((-np.arange(1,J+1), np.arange(K + 1, K + L + 1)))
    23                                                   ds = np.zeros((1, J + L), dtype = int)
    24                                                   DD0, pn, dn, ps, ds, err = simplex_procedures(DD0, pn, dn, ps, ds, tolerance)
    25                                                   if DD0[0, 0] != 0:
    26                                                       raise Exception('*** Problem requires impulse controls')
    27         1         32.0     32.0      0.0      if np.size(F) > 0:
    28                                                   DD1 = np.vstack((-np.hstack((0, d)), np.hstack((np.vstack(alpha), F))))
    29                                                   pn1 = np.vstack(np.arange(1,K+1))
    30                                                   ps1 = np.zeros((K, 1), dtype = int)
    31                                                   dn1 = np.arange(K + 1, K + L + 1)
    32                                                   ds1 = np.zeros((1, L), dtype = int)
    33                                                   DD1, pn1, dn1, ps1, ds1, err = simplex_procedures(DD1, pn1, dn1, ps1, ds1, tolerance)
    34                                                   x_0 = np.zeros((K + L, 1))
    35                                                   x_0[pn1] = DD1[-1, 0]
    36                                               else:
    37         1          3.0      3.0      0.0          x_0 = alpha
    38                                           
    39         1          9.0      9.0      0.0      if np.size(H) > 0:
    40         1      50106.0  50106.0     44.4          DD2 = np.vstack((np.hstack((0, np.hstack(b))), np.hstack((np.vstack(-gamma), -H.transpose()))))
    41         1      31291.0  31291.0     27.7          pn2 = np.vstack(np.arange(1,J+1))
    42         1         38.0     38.0      0.0          ps2 = np.zeros((J, 1), dtype = int)
    43         1         37.0     37.0      0.0          dn2 = np.arange(J + 1,J + I+1)
    44         1         10.0     10.0      0.0          ds2 = np.zeros((1, I), dtype = int)
    45         1      31152.0  31152.0     27.6          DD2, pn2, dn2, ps2, ds2, err = simplex_procedures(DD2, pn2, dn2, ps2, ds2, tolerance)
    46         1         30.0     30.0      0.0          q_N = np.zeros((J + I, 1))
    47         1        149.0    149.0      0.1          q_N[pn2] = DD2[-1, 0]
    48                                               else:
    49                                                   q_N = -gamma
    50                                           
    51         1          2.0      2.0      0.0      return x_0, q_N

Total time: 13.5531 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_dict.py
Function: calc_dict at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           ####'#@profile
     6                                           def calc_dict(base_sequence, N1, N2, pivots):
     7       893       4659.0      5.2      0.0      NN = len(pivots)
     8       893       5756.0      6.4      0.0      if N1 >= 0:
     9       866     120605.0    139.3      0.3          test1 = np.fabs(np.asarray(base_sequence['places']) - N1)
    10       866      36036.0     41.6      0.1          ind1 = np.argmin(test1)
    11       866       4333.0      5.0      0.0          if N2 <= NN:
    12       559      44283.0     79.2      0.1              test2 = np.fabs(np.asarray(base_sequence['places']) - N2)
    13       559      11440.0     20.5      0.0              ind2 = np.argmin(test2)
    14       559       5210.0      9.3      0.0              if test1[ind1] < test2[ind2]:
    15                                                           return get_new_dict(base_sequence['bases'][ind2], base_sequence['places'][ind2], N2, pivots), N2
    16                                                       else:
    17       559   22570290.0  40376.2     61.0                  return get_new_dict(base_sequence['bases'][ind1], base_sequence['places'][ind1], N1, pivots), N1
    18                                                   else:
    19       307   13809262.0  44981.3     37.3              return get_new_dict(base_sequence['bases'][ind1], base_sequence['places'][ind1], N1, pivots), N1
    20                                               else:
    21        27       1440.0     53.3      0.0          test2 = np.fabs(np.array(base_sequence['places']) - N2)
    22        27        882.0     32.7      0.0          ind2 = np.argmin(test2)
    23        27     360082.0  13336.4      1.0          return get_new_dict(base_sequence['bases'][ind2], base_sequence['places'][ind2], N2, pivots), N2

Total time: 3.17451 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_equations.py
Function: calc_equations at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           ####'#@profile
     6                                           def calc_equations(klist,jlist,pivots,x_0,del_x_0,q_N,del_q_N,T,del_T,dx,dq):
     7       621       6377.0     10.3      0.1      NN = len(pivots)+1
     8       621      91296.0    147.0      1.1      coeff = np.zeros((NN,NN))
     9       621      15101.0     24.3      0.2      rhs = np.zeros(NN)
    10       621       5084.0      8.2      0.1      drhs = np.zeros(NN)
    11    108852     157592.0      1.4      1.8      for n in range(NN-1):
    12    108231     219898.0      2.0      2.5          vv = pivots[n][0]
    13    108231     157265.0      1.5      1.8          if vv > 0:
    14    105721     139721.0      1.3      1.6              try:
    15    105721    1535666.0     14.5     17.7                  k = find(klist == vv)[0]
    16                                                       except:
    17                                                           print(vv)
    18    105721     575986.0      5.4      6.7              coeff[n,0:n+1] = dx[k, 0:n+1]
    19    105721     444033.0      4.2      5.1              rhs[n] = -x_0[k]
    20    105721     393736.0      3.7      4.5              drhs[n] = -del_x_0[k]
    21                                                   else:
    22      2510      39918.0     15.9      0.5              j = find(jlist == -vv)[0]
    23      2510      14577.0      5.8      0.2              coeff[n,n+1:] = dq[j, n+1:]
    24      2510      11345.0      4.5      0.1              rhs[n] = -q_N[j]
    25      2510       9842.0      3.9      0.1              drhs[n] = -del_q_N[j]
    26       621      32112.0     51.7      0.4      coeff[NN-1,:] = np.ones(NN)
    27       621       1819.0      2.9      0.0      rhs[NN-1] = T
    28       621       2127.0      3.4      0.0      drhs[NN-1] = del_T
    29       621    4796530.0   7723.9     55.4      sol = np.linalg.solve(coeff, np.hstack((np.vstack(rhs),np.vstack(drhs))))
    30                                               # tau =clean(sol(:,1));%
    31                                               # dtau=clean(sol(:,2));%
    32       621      10336.0     16.6      0.1      return sol[:,0], sol[:,1]

Total time: 18.0957 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_statecollide4.py
Function: calc_statecollide at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           ####'#@profile
     5                                           def calc_statecollide(klist, jlist, x, del_x, q, del_q, sdx, sdq, tolerance):
     6                                           # Calculates time and variable for which state shrinks to zero, and performs testing
     7                                           # problem   result = 0  Ok
     8                                           #           result = 1  immediate collision         data = TODO
     9                                           #           result = 2  multiple states hit zero    data = TODO
    10       607       3137.0      5.2      0.0      problem = {'result': 0, 'data': []}
    11                                           
    12       607       3900.0      6.4      0.0      KK = len(klist)
    13       607       2520.0      4.2      0.0      JJ = len(jlist)
    14                                               #TODO: paralellize
    15       607   12015407.0  19794.7     24.3      rz_x = calc_rz(KK, x, del_x, sdx, True)
    16       607   13103457.0  21587.2     26.5      rz_q = calc_rz(JJ, q, del_q, sdq, False)
    17                                               #end
    18                                           
    19       607    4064779.0   6696.5      8.2      rz = np.vstack((rz_x,rz_q))
    20       607    1319114.0   2173.2      2.7      if np.all(np.isnan(rz)):
    21                                                   return [], problem
    22                                           
    23       607    1283627.0   2114.7      2.6      kk, nn = np.unravel_index(rz.argmax(), rz.shape)
    24       607       8015.0     13.2      0.0      bb = rz[kk,nn]
    25       607       8415.0     13.9      0.0      if bb == 0:
    26                                                   print(kk, nn)
    27                                                   test1 = np.inf
    28                                                   nn=1
    29                                                   vv=0
    30                                               else:
    31                                                   #kk = find(rz(:, nn) == bb); %
    32       607       4007.0      6.6      0.0          test1 =1./bb
    33       607       4102.0      6.8      0.0          if test1 <= -tolerance:
    34                                                       return [], problem
    35       607       6030.0      9.9      0.0          elif abs(test1) < tolerance:
    36                                                       print('immediate collision\n')
    37                                                       problem['result'] = 1
    38                                                       return [], problem
    39       607       2245.0      3.7      0.0          elif test1 >= tolerance:
    40       607    8933591.0  14717.6     18.1              test2 = rz/bb - 1
    41       607    6790216.0  11186.5     13.8              zstates = np.fabs(test2) < tolerance
    42       607    1712913.0   2821.9      3.5              if np.sum(zstates) > 1:
    43                                                           print('multiple states hit zero\n')
    44                                                           problem['result'] = 2
    45                                                           return [], problem
    46       607      88715.0    146.2      0.2          all_names = np.hstack((klist, -jlist))
    47       607       6123.0     10.1      0.0          vv = all_names[kk]
    48       607       6366.0     10.5      0.0      return [test1, nn - 1, vv], problem

Total time: 23.7192 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_states4.py
Function: calc_states at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           ####'#@profile
     6                                           def calc_states(dx,dq,x_0,del_x_0,q_N,del_q_N,tau,dtau,sdx, sdq, tolerance):
     7       621       2232.0      3.6      0.0      K1, N1  = dx.shape
     8       621       1514.0      2.4      0.0      if K1 == 0:
     9                                                   x = np.zeros((0, N1 + 1))
    10                                                   del_x = np.zeros((0, N1 + 1))
    11                                               else:
    12                                                   # x = Array('d',K1 * (N1 + 1))
    13                                                   # del_x = Array('d',K1 * (N1 + 1))
    14                                                   # K1 = Value('d', K1)
    15                                                   # x_0 = Array('d', x_0)
    16                                                   # p = Process(target=calc_prim_states, args=())
    17       621      38309.0     61.7      0.1          x = np.zeros((K1, N1 + 1))
    18       621      27431.0     44.2      0.0          del_x = np.zeros((K1, N1 + 1))
    19                                           
    20       621       2139.0      3.4      0.0      J1 = dq.shape[0]
    21       621       1224.0      2.0      0.0      if J1 == 0:
    22                                                   q = np.zeros((0,N1+1))
    23                                                   del_q = np.zeros((0,N1+1))
    24                                               else:
    25       621      29587.0     47.6      0.0          q = np.zeros((J1, N1 + 1))
    26       621      36764.0     59.2      0.1          del_q = np.zeros((J1, N1 + 1))
    27                                               # TODO: parallelize
    28       621   29576377.0  47627.0     45.7      _calc_states(x, del_x, K1, x_0, del_x_0, tau, dtau, dx, sdx, tolerance, True)
    29       621   34987765.0  56341.0     54.1      _calc_states(q, del_q, J1, q_N, del_q_N, tau, dtau, dq, sdq, tolerance, False)
    30       621       4953.0      8.0      0.0      return x, del_x, q, del_q

Total time: 23.6426 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_states4.py
Function: _calc_states at line 33

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    33                                           ####'#@profile
    34                                           def _calc_states(state, del_state, vdim, state0, del_state0, tau, dtau, dstate, sdstate, tolerance, is_primal):
    35      1242       3954.0      3.2      0.0      if vdim > 0:
    36      1242    1017695.0    819.4      1.6          sdstate = sdstate == 0
    37      1242    1088551.0    876.5      1.7          sdstate = np.logical_or(np.hstack((np.full((vdim, 1), False), sdstate)), np.hstack((sdstate, np.full((vdim, 1), False))))
    38      1242       4329.0      3.5      0.0          if is_primal:
    39                                                       #TODO: parallelize
    40       621   13919861.0  22415.2     21.6              _calc_primal(state, dstate, tau, state0, sdstate, tolerance)
    41       621   14629888.0  23558.6     22.7              _calc_primal(del_state, dstate, dtau, del_state0, sdstate, tolerance)
    42                                                   else:
    43                                                       # TODO: parallelize
    44       621   16826512.0  27095.8     26.1              _calc_dual(state, dstate, tau, state0, sdstate, tolerance)
    45       621   17008339.0  27388.6     26.4              _calc_dual(del_state, dstate, dtau, del_state0, sdstate, tolerance)

Total time: 10.4333 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_states4.py
Function: _calc_primal at line 47

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    47                                           ####'#@profile
    48                                           def _calc_primal(state, dstate, tau, state0, sd, tolerance):
    49      1242   22310092.0  17963.0     78.4      state[:, :] = np.cumsum(np.hstack((state0, dstate * np.hstack(tau[:, None]))), 1)
    50      1242    6152925.0   4954.0     21.6      state[np.logical_or(np.absolute(state) < tolerance, sd)] = 0

Total time: 12.3706 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\calc_states4.py
Function: _calc_dual at line 53

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    53                                           ####'#@profile
    54                                           def _calc_dual(state, dstate, tau, state0, sd, tolerance):
    55      1242   26859723.0  21626.2     79.6      state[:, :] = np.fliplr(np.cumsum(np.fliplr(np.hstack((dstate * np.hstack(tau[:, None]), state0))), 1))
    56      1242    6888452.0   5546.3     20.4      state[np.logical_or(np.absolute(state) < tolerance, sd)] = 0

Total time: 0.390297 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\extract_rates.py
Function: extract_rates at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           ####'#@profile
     7                                           def extract_rates(prim_name, dual_name, dct, KK, JJ, totalK = None, totalJ = None):
     8       641       1954.0      3.0      0.2      if totalK is None:
     9         1          3.0      3.0      0.0          totalK = KK
    10       641       1494.0      2.3      0.1      if totalJ is None:
    11         1          2.0      2.0      0.0          totalJ = JJ
    12       641      56819.0     88.6      5.3      klist1 = find(prim_name > 0)
    13       641      26470.0     41.3      2.5      jlist2 = find(dual_name < 0)
    14       641      11501.0     17.9      1.1      kn1 =  prim_name[klist1]
    15       641      18507.0     28.9      1.7      jn2 = -dual_name[jlist2]
    16       641       1722.0      2.7      0.2      if KK < totalK:
    17        41       1800.0     43.9      0.2          kn2 =  dual_name[dual_name > 0]
    18        41       7708.0    188.0      0.7          kord = np.argsort(np.argsort(np.hstack((kn1, kn2))))[:len(kn1)]
    19        41      23038.0    561.9      2.2          dx = coo_matrix((dct[klist1+1,0], (kord, np.zeros(len(kord)))), shape=(KK, 1))
    20                                               else:
    21       600     584033.0    973.4     54.9          dx = coo_matrix((dct[klist1+1,0], (kn1-1, np.zeros(len(kn1)))), shape=(KK, 1))
    22       641       2699.0      4.2      0.3      if JJ < totalJ:
    23         4        111.0     27.8      0.0          jn1 = -prim_name[prim_name < 0]
    24         4        867.0    216.8      0.1          jord = np.argsort(np.argsort(np.hstack((jn1, jn2))))[len(jn1):]
    25         4       1841.0    460.2      0.2          dq = coo_matrix((dct[0,jlist2+1],(jord,np.zeros(len(jord)))),shape=(JJ,1))
    26                                               else:
    27       637     322088.0    505.6     30.2          dq = coo_matrix((dct[0,jlist2+1],(jn2-1,np.zeros(len(jn2)))),shape=(JJ,1))
    28       641       2110.0      3.3      0.2      return dx, dq

Total time: 25.9128 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\get_new_dict.py
Function: get_new_dict at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           ####'#@profile
     6                                           def get_new_dict(oldDict, oldPlace, newPlace, pivots):
     7      1204       6022.0      5.0      0.0      L = len(pivots)
     8      1204       8259.0      6.9      0.0      if isinstance(oldPlace, list):
     9                                                   oldPlace = oldPlace[0]
    10                                                   oldDict = oldDict[0]
    11      1204       7241.0      6.0      0.0      assert(newPlace >=0 and newPlace < L, 'new dictionary place is out of a base sequence')
    12      1204       4987.0      4.1      0.0      assert(oldPlace >=0 and oldPlace < L, 'old dictionary place is out of a base sequence')
    13      1204   46444180.0  38574.9     65.7      newDict={'A':oldDict['A'].copy(), 'prim_name':oldDict['prim_name'].copy(), 'dual_name':oldDict['dual_name'].copy()}
    14      1204      20772.0     17.3      0.0      if oldPlace < newPlace:
    15       675       7975.0     11.8      0.0          for i in range(oldPlace,newPlace):
    16       340      33239.0     97.8      0.0              out_v = find(newDict['prim_name'] == pivots[i][0])
    17       340       9383.0     27.6      0.0              in_v = find(newDict['dual_name'] == pivots[i][1])
    18       340   23888926.0  70261.5     33.8              newDict = dict_pivot(newDict, out_v, in_v)
    19      1204       4450.0      3.7      0.0      if newPlace < oldPlace:
    20        30        448.0     14.9      0.0          for i in range(oldPlace-1, newPlace-1, -1):
    21        15       1091.0     72.7      0.0              out_v = find(newDict['prim_name'] == pivots[i][1])
    22        15        420.0     28.0      0.0              in_v = find(newDict['dual_name'] == pivots[i][0])
    23        15     251803.0  16786.9      0.4              newDict = dict_pivot(newDict, out_v, in_v)
    24      1204       3456.0      2.9      0.0      return newDict

Total time: 0 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\pivot.py
Function: base_pivot at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           ####'#@profile
     5                                           def base_pivot(A, i, j):
     6                                               i = i + 1
     7                                               j = j + 1
     8                                               p = A[i, j]
     9                                               if p == 0:
    10                                                   raise Exception('pivot on zero')
    11                                               rp = (A[i,:] / p).copy()
    12                                               c = A[:, j].copy()
    13                                               A -= np.dot(np.reshape(c, (np.size(c), 1)), np.reshape(rp, (1, np.size(rp))))
    14                                               A[i,:] = rp
    15                                               A[:, j] = c / -p
    16                                               A[i, j] = 1. / p
    17                                               return A

Total time: 36.6505 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\pivot.py
Function: full_pivot at line 20

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    20                                           ####'#@profile
    21                                           def full_pivot(A, i, j, pn, dn, ps, ds):
    22      1485       6629.0      4.5      0.0      nam = pn[i]
    23      1485       7481.0      5.0      0.0      pn[i] = dn[j]
    24      1485       4237.0      2.9      0.0      dn[j] = nam
    25      1485       4261.0      2.9      0.0      sam = ps[i]
    26      1485       7596.0      5.1      0.0      ps[i] = - ds[j]
    27      1485       4554.0      3.1      0.0      ds[j] = - sam
    28      1485       7506.0      5.1      0.0      i = i + 1
    29      1485       4789.0      3.2      0.0      j = j + 1
    30      1485       5868.0      4.0      0.0      p = A[i, j]
    31      1485       5561.0      3.7      0.0      if p == 0:
    32                                                   raise Exception('pivot on zero')
    33      1485      84216.0     56.7      0.1      rp = (A[i,:] / p).copy()
    34      1485     172467.0    116.1      0.2      c = A[:, j].copy()
    35      1485   98983242.0  66655.4     99.0      A -= np.dot(np.reshape(c,(np.size(c),1)), np.reshape(rp, (1, np.size(rp))))
    36      1485     119513.0     80.5      0.1      A[i,:] = rp
    37      1485     542354.0    365.2      0.5      A[:, j] = c / -p
    38      1485      17893.0     12.0      0.0      A[i, j] = 1. / p
    39      1485       7851.0      5.3      0.0      return A, pn, dn, ps, ds

Total time: 8.83267 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\pivot.py
Function: dict_pivot at line 42

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    42                                           ####'#@profile
    43                                           def dict_pivot(dct, i, j):
    44       355       3012.0      8.5      0.0      nam = dct['prim_name'][i]
    45       355       3047.0      8.6      0.0      dct['prim_name'][i] = dct['dual_name'][j]
    46       355       1055.0      3.0      0.0      dct['dual_name'][j] = nam
    47       355       7636.0     21.5      0.0      i = i + 1
    48       355       2794.0      7.9      0.0      j = j + 1
    49       355      13338.0     37.6      0.1      p = dct['A'][i, j]
    50       355       4969.0     14.0      0.0      if p == 0:
    51                                                   raise Exception('pivot on zero')
    52       355      29201.0     82.3      0.1      rp = (dct['A'][i, :] / p).copy()
    53       355      78245.0    220.4      0.3      c = dct['A'][:, j].copy()
    54       355   23766278.0  66947.3     98.6      dct['A'] -= np.dot(np.reshape(c,(np.size(c),1)), np.reshape(rp, (1, np.size(rp))))
    55       355      42356.0    119.3      0.2      dct['A'][i, :] = rp
    56       355     126370.0    356.0      0.5      dct['A'][:, j] = c / -p
    57       355      16865.0     47.5      0.1      dct['A'][i, j] = 1. / p
    58       355       1188.0      3.3      0.0      return dct

Total time: 36.4713 s
File: C:\DataD\Work\CERBERO\CLP\SCLPsolver\subroutines\simplex_procedures.py
Function: simplex_procedures at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           ####'#@profile
     7                                           def simplex_procedures(A,pn,dn,ps,ds, tolerance = 0):
     8                                           
     9       615       8417.0     13.7      0.0      err = dict()
    10       615       3819.0      6.2      0.0      err['result'] = 0
    11       615       4414.0      7.2      0.0      mm = A.shape[0]
    12       615       2790.0      4.5      0.0      nn = A.shape[1]
    13                                           
    14       615      48596.0     79.0      0.0      pneg = find(ps == -1)
    15       616       4307.0      7.0      0.0      while pneg.size > 0:
    16         1          7.0      7.0      0.0          i = pneg[0]
    17         1          4.0      4.0      0.0          if tolerance == 0:
    18                                                       cond = A[i + 1, 1:] != 0
    19                                                   else:
    20         1         39.0     39.0      0.0              cond = np.absolute(A[i + 1, 1:]) > tolerance
    21         1         21.0     21.0      0.0          jj = find(np.logical_and(ds == -1, cond))
    22         1          3.0      3.0      0.0          if jj.size > 0:
    23                                                       j = jj[0]
    24                                                   else:
    25         1         19.0     19.0      0.0              mat = A[i + 1, 1:] / A[0, 1:]
    26         1         10.0     10.0      0.0              if A[i + 1, 0] > 0:
    27         1         57.0     57.0      0.0                  j = np.argmax(mat * (ds != 1))
    28         1          5.0      5.0      0.0                  m = mat[j]
    29                                                       else:
    30                                                           j = np.argmin(mat * (ds != 1))
    31                                                           m = -mat[j]
    32         1          5.0      5.0      0.0              if m <=0:
    33                                                           jj = find(A[i + 1, 1:])
    34                                                           if jj.size > 0:
    35                                                               j = jj[0]
    36                                                           else:
    37                                                               raise Exception('*** No pivot available')
    38         1       1628.0   1628.0      0.0          A, pn, dn, ps, ds = full_pivot(A, i, j, pn, dn, ps, ds)
    39         1         28.0     28.0      0.0          pneg = find(ps == -1)
    40                                           
    41       615      16102.0     26.2      0.0      dneg = find(ds == -1)
    42       897       5591.0      6.2      0.0      while dneg.size > 0:
    43       282       2461.0      8.7      0.0          j = dneg[0]
    44       282       1564.0      5.5      0.0          if tolerance == 0:
    45                                                       cond = A[1:, j + 1] != 0
    46                                                   else:
    47       282      66697.0    236.5      0.1              cond = np.absolute(A[1:, j + 1]) > tolerance
    48       282      10003.0     35.5      0.0          ii = find(np.logical_and(ps == -1, cond))
    49       282       1356.0      4.8      0.0          if ii.size > 0:
    50                                                       i = ii[0]
    51                                                   else:
    52       282      65550.0    232.4      0.1              mat = -A[1:, j + 1] / A[1:, 0]
    53       282       4142.0     14.7      0.0              if A[0, j + 1] < 0:
    54                                                           i = np.argmax(mat * (ps != 1))
    55                                                           m = mat[i]
    56                                                       else:
    57       282      27026.0     95.8      0.0                  i = np.argmin(mat * (ps != 1))
    58       282       2062.0      7.3      0.0                  m = -mat[i]
    59       282       1625.0      5.8      0.0              if m <=0:
    60                                                           ii = find(A[1:, j+1])
    61                                                           if ii.size > 0:
    62                                                               i = ii[0]
    63                                                           else:
    64                                                               raise Exception('*** No pivot available')
    65       282   18494159.0  65582.1     18.6          A, pn, dn, ps, ds = full_pivot(A, i, j, pn, dn, ps, ds)
    66       282      23000.0     81.6      0.0          dneg = find(ds == -1)
    67                                           
    68       615     178012.0    289.5      0.2      ptest = find(np.logical_and(ps == 0,  A[1:, 0] < 0))
    69       615      32024.0     52.1      0.0      dtest = find(np.logical_and(ds == 0,  A[0, 1:] < 0))
    70                                           
    71       615       3466.0      5.6      0.0      if ptest.size > 0 and dtest.size == 0:
    72       704       5541.0      7.9      0.0          while ptest.size > 0:
    73       398       2672.0      6.7      0.0              i = ptest[0]
    74       398      82702.0    207.8      0.1              mat = np.divide(-A[i + 1, 1:], A[0, 1:], out=np.zeros_like(A[i + 1, 1:]), where=np.logical_and(A[0, 1:]!=0, ds != 1))
    75       398      19654.0     49.4      0.0              j = np.argmax(mat)
    76                                                       #j = np.argmax(mat * (ds != 1))
    77       398       4862.0     12.2      0.0              if mat[j] <= 0:
    78                                                           A[0, 0] = -np.inf
    79                                                           err['result'] = 1
    80                                                           err['message'] = '***  problem is primal infeasible'
    81                                                           return A, pn, dn, ps, ds, err
    82       398   28465917.0  71522.4     28.6              A, pn, dn, ps, ds = full_pivot(A, i, j, pn, dn, ps, ds)
    83       398     111621.0    280.5      0.1              ptest = find(np.logical_and(ps == 0, A[1:, 0] < 0))
    84       309       1701.0      5.5      0.0      elif ptest.size == 0 and dtest.size > 0:
    85      1084       9416.0      8.7      0.0          while dtest.size > 0:
    86       777       5510.0      7.1      0.0              j = dtest[0]
    87       777     297212.0    382.5      0.3              mat = np.divide(A[1:, j + 1], A[1:, 0], out=np.zeros_like(A[1:, j + 1]), where=np.logical_and(A[1:, 0] != 0, ps != 1))
    88       777      45734.0     58.9      0.0              i = np.argmax(mat)
    89                                                       #i = np.argmax(mat * (ps != 1))
    90       777      10857.0     14.0      0.0              if mat[i] <= 0:
    91                                                           A[0, 0] = np.inf
    92                                                           err['result'] = 2
    93                                                           err['message'] = '***  problem is dual infeasible'
    94                                                           return A, pn, dn, ps, ds, err
    95       777   51301453.0  66025.0     51.6              A, pn, dn, ps, ds = full_pivot(A, i, j, pn, dn, ps, ds)
    96       777     119684.0    154.0      0.1              dtest = find(np.logical_and(ds == 0, A[0, 1:] < 0))
    97         2         10.0      5.0      0.0      elif ptest.size > 0 and dtest.size > 0:
    98                                                   B = np.zeros((mm+1,nn+1))
    99                                                   B[:-1,nn:nn+1] = np.random.rand(mm, 1) + 1
   100                                                   B[mm:mm+1,:-1] = np.random.rand(1, nn) + 1
   101                                                   B[:-1, :-1] = A
   102                                                   mat = np.divide(-A[0, 1:], B[mm, 1:-1], out=np.zeros_like(A[0, 1:]), where=np.logical_and(B[mm, 1:-1] > 0, ds != 1) )
   103                                                   j = np.argmax(mat)
   104                                                   mu1 = mat[j]
   105                                                   mat = np.divide(-A[1:, 0], B[1:-1, nn], out=np.zeros_like(A[1:, 0]), where=np.logical_and(B[1:-1, nn] >0, ps != 1) )
   106                                                   i = np.argmax(mat)
   107                                                   mu2 = mat[i]
   108                                                   mu = max(mu1,mu2)
   109                                                   while mu > 0:
   110                                                       if mu1 > mu2:
   111                                                           mat = np.divide(B[1:-1, j+1], B[1:-1, 0] + mu * B[1:-1, nn], out=np.zeros_like(B[1:-1, j+1]), where= ps != 1)
   112                                                           i = np.argmax(mat)
   113                                                           if mat[i] <= 0:
   114                                                               B[0, 0] = np.inf
   115                                                               err['result'] = 2
   116                                                               err['message'] = '***  problem is dual infeasible'
   117                                                               return B[:-1,:-1], pn, dn, ps, ds, err
   118                                                       else:
   119                                                           mat = np.divide(-B[i + 1, 1:-1], B[0, 1:-1] + mu * B[mm, 1:-1], out=np.zeros_like(B[i + 1, 1:-1]), where= ds !=1)
   120                                                           j = np.argmax(mat)
   121                                                           if mat[j] <= 0:
   122                                                               B[0, 0] = - np.inf
   123                                                               err['result'] = 1
   124                                                               err['message'] = '***  problem is primal infeasible'
   125                                                               return B[:-1, :-1], pn, dn, ps, ds, err
   126                                                       B, pn, dn, ps, ds = full_pivot(B, i, j, pn, dn, ps, ds)
   127                                                       mat = np.divide(-B[0, 1:-1], B[mm, 1:-1], out=np.zeros_like(B[0, 1:-1]), where=np.logical_and(B[mm, 1:-1] > 0, ds != 1))
   128                                                       j = np.argmax(mat)
   129                                                       mu1 = mat[j]
   130                                                       mat = np.divide(-B[1:-1, 0], B[1:-1, nn], out=np.zeros_like(B[1:-1, 0]), where=np.logical_and(B[1:-1, nn] > 0, ps != 1))
   131                                                       i = np.argmax(mat)
   132                                                       mu2 = mat[i]
   133                                                       mu = max(mu1, mu2)
   134                                                   A = B[:-1, :-1]
   135       615       3526.0      5.7      0.0      return A, pn, dn, ps, ds, err

